app:
  description: "基于MCP Bridge的智能短视频生成工作流 - 完整功能版"
  icon: "🎬"
  icon_background: "#FF6B6B"
  mode: workflow
  name: "智能短视频生成器 v2.0"

kind: app
version: 0.1.2

workflow:
  conversation_variables: []
  environment_variables:
    - name: MCP_BRIDGE_URL
      type: string
      value: "http://localhost:8082"
    - name: CAPCUT_API_URL
      type: string
      value: "http://localhost:9000"
    - name: ENABLE_HTTP_FALLBACK
      type: string
      value: "true"
    - name: MAX_RETRY_COUNT
      type: string
      value: "3"
    - name: RENDER_TIMEOUT
      type: string
      value: "300"

  features:
    file_upload:
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
          - local_file
          - remote_url
    opening_statement: ""
    retriever_resource:
      enabled: false
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ""
      voice: ""

  graph:
    edges:
      - id: start-to-validate
        source: start
        target: validate_input
      - id: validate-to-script
        source: validate_input
        target: generate_script
      - id: script-to-tts
        source: generate_script
        target: tts_generation
      - id: tts-to-subtitle
        source: tts_generation
        target: subtitle_generation
      - id: subtitle-to-bgm
        source: subtitle_generation
        target: bgm_generation
      - id: bgm-to-visual
        source: bgm_generation
        target: visual_materials
      - id: visual-to-draft
        source: visual_materials
        target: create_draft
      - id: draft-to-assembly
        source: create_draft
        target: timeline_assembly
      - id: assembly-to-audio
        source: timeline_assembly
        target: audio_mixing
      - id: audio-to-subtitle-align
        source: audio_mixing
        target: subtitle_alignment
      - id: subtitle-align-to-render
        source: subtitle_alignment
        target: submit_render
      - id: render-to-monitor
        source: submit_render
        target: monitor_progress
      - id: monitor-to-end
        source: monitor_progress
        target: end

    nodes:
      # 节点1: 开始节点 - 用户输入
      - data:
          desc: "用户输入参数收集"
          selected: false
          title: "用户输入"
          type: start
          variables:
            - label: "视频主题"
              max_length: 200
              options: []
              required: true
              type: text-input
              variable: video_topic
            - label: "视频时长(秒)"
              max_length: 10
              options: []
              required: false
              type: number-input
              variable: video_duration
            - label: "视频风格"
              options:
                - "现代简约"
                - "商务专业"
                - "时尚潮流"
                - "教育科普"
                - "营销推广"
              required: false
              type: select
              variable: video_style
            - label: "视频比例"
              options:
                - "9:16"
                - "16:9"
                - "1:1"
              required: false
              type: select
              variable: video_ratio
            - label: "启用字幕"
              options:
                - "true"
                - "false"
              required: false
              type: select
              variable: enable_subtitle
            - label: "启用背景音乐"
              options:
                - "true"
                - "false"
              required: false
              type: select
              variable: enable_bgm
        height: 54
        id: start
        position:
          x: 80
          y: 282
        positionAbsolute:
          x: 80
          y: 282
        selected: false
        type: start
        width: 244

      # 节点2: 参数验证和预处理
      - data:
          code: |
            import json
            
            def main(video_topic: str, video_duration: int = 30, video_style: str = "现代简约", 
                    video_ratio: str = "9:16", enable_subtitle: str = "true", 
                    enable_bgm: str = "true") -> dict:
                """
                验证和预处理用户输入参数
                """
                try:
                    # 参数验证
                    if not video_topic or len(video_topic.strip()) == 0:
                        raise ValueError("视频主题不能为空")
                    
                    if video_duration <= 0 or video_duration > 300:
                        video_duration = 30
                    
                    # 构建验证后的参数
                    validated_params = {
                        "video_topic": video_topic.strip(),
                        "video_duration": int(video_duration),
                        "video_style": video_style,
                        "video_ratio": video_ratio,
                        "enable_subtitle": enable_subtitle.lower() == "true",
                        "enable_bgm": enable_bgm.lower() == "true",
                        "timestamp": int(time.time())
                    }
                    
                    return {
                        "validated_params": json.dumps(validated_params),
                        "validation_success": True,
                        "message": "参数验证成功"
                    }
                except Exception as e:
                    return {
                        "validated_params": json.dumps({}),
                        "validation_success": False,
                        "message": f"参数验证失败: {str(e)}"
                    }
          desc: "验证用户输入参数并设置默认值"
          outputs:
            validated_params:
              type: string
            validation_success:
              type: boolean
            message:
              type: string
          selected: false
          title: "参数验证"
          type: code
          variables:
            - value_selector:
                - start
                - video_topic
              variable: video_topic
            - value_selector:
                - start
                - video_duration
              variable: video_duration
            - value_selector:
                - start
                - video_style
              variable: video_style
            - value_selector:
                - start
                - video_ratio
              variable: video_ratio
            - value_selector:
                - start
                - enable_subtitle
              variable: enable_subtitle
            - value_selector:
                - start
                - enable_bgm
              variable: enable_bgm
        height: 54
        id: validate_input
        position:
          x: 384
          y: 282
        positionAbsolute:
          x: 384
          y: 282
        selected: false
        type: code
        width: 244

      # 节点3: 脚本生成
      - data:
          context:
            enabled: false
            variable_selector: []
          desc: "基于用户主题生成结构化视频脚本"
          model:
            completion_params:
              temperature: 0.7
            mode: chat
            name: doubao-pro-32k
            provider: volcengine_maas
          prompt_template:
            - id: system
              role: system
              text: |
                你是一个专业的短视频脚本创作专家。请基于用户提供的主题和参数，生成一个结构化的视频脚本。

                要求：
                1. 脚本必须符合指定的时长和风格
                2. 内容要有吸引力，适合短视频传播
                3. 场景划分要合理，每个场景3-8秒
                4. 包含视觉描述，便于后续素材生成

                请严格按照以下JSON格式输出：
                {
                  "title": "视频标题",
                  "description": "视频描述",
                  "total_duration": 30,
                  "scenes": [
                    {
                      "id": 1,
                      "text": "场景文字内容",
                      "duration": 5,
                      "visual_description": "视觉场景描述",
                      "text_style": "字体样式建议",
                      "transition": "转场效果"
                    }
                  ],
                  "bgm_style": "背景音乐风格",
                  "voice_style": "旁白风格"
                }
            - id: user
              role: user
              text: |
                请为以下主题生成短视频脚本：

                主题：{{#validate_input.validated_params#}}
                
                请确保内容有趣、吸引人，适合指定风格。
          selected: false
          title: "脚本生成"
          type: llm
          variables:
            - value_selector:
                - validate_input
                - validated_params
              variable: validated_params
          vision:
            enabled: false
        height: 98
        id: generate_script
        position:
          x: 688
          y: 282
        positionAbsolute:
          x: 688
          y: 282
        selected: false
        type: llm
        width: 244

      # 节点4: TTS语音合成
      - data:
          code: |
            import json
            import requests
            import time
            
            def main(video_script: str, validated_params: str) -> dict:
                """
                TTS语音合成处理
                """
                try:
                    script_data = json.loads(video_script)
                    params_data = json.loads(validated_params)
                    
                    # 提取所有场景文字
                    all_text = []
                    for scene in script_data.get("scenes", []):
                        all_text.append(scene.get("text", ""))
                    
                    full_text = " ".join(all_text)
                    
                    # 调用TTS服务
                    tts_result = {
                        "audio_url": f"/tmp/tts_audio_{int(time.time())}.mp3",
                        "duration": params_data.get("video_duration", 30),
                        "text": full_text,
                        "voice_style": script_data.get("voice_style", "标准女声")
                    }
                    
                    return {
                        "tts_result": json.dumps(tts_result),
                        "audio_duration": tts_result["duration"],
                        "success": True
                    }
                except Exception as e:
                    return {
                        "tts_result": json.dumps({"error": str(e)}),
                        "audio_duration": 0,
                        "success": False
                    }
          desc: "生成TTS语音文件"
          outputs:
            tts_result:
              type: string
            audio_duration:
              type: number
            success:
              type: boolean
          selected: false
          title: "TTS语音合成"
          type: code
          variables:
            - value_selector:
                - generate_script
                - text
              variable: video_script
            - value_selector:
                - validate_input
                - validated_params
              variable: validated_params
        height: 54
        id: tts_generation
        position:
          x: 992
          y: 182
        positionAbsolute:
          x: 992
          y: 182
        selected: false
        type: code
        width: 244

      # 节点5: 字幕生成
      - data:
          code: |
            import json
            import time
            
            def main(video_script: str, validated_params: str) -> dict:
                """
                生成SRT格式字幕文件
                """
                try:
                    script_data = json.loads(video_script)
                    params_data = json.loads(validated_params)
                    
                    subtitles = []
                    current_time = 0
                    
                    for i, scene in enumerate(script_data.get("scenes", [])):
                        start_time = current_time
                        duration = scene.get("duration", 5)
                        end_time = start_time + duration
                        
                        subtitle = {
                            "index": i + 1,
                            "start_time": start_time,
                            "end_time": end_time,
                            "text": scene.get("text", ""),
                            "style": scene.get("text_style", "默认")
                        }
                        subtitles.append(subtitle)
                        current_time = end_time
                    
                    subtitle_result = {
                        "subtitle_file": f"/tmp/subtitle_{int(time.time())}.srt",
                        "subtitles": subtitles,
                        "total_duration": current_time
                    }
                    
                    return {
                        "subtitle_result": json.dumps(subtitle_result),
                        "success": True
                    }
                except Exception as e:
                    return {
                        "subtitle_result": json.dumps({"error": str(e)}),
                        "success": False
                    }
          desc: "生成字幕文件"
          outputs:
            subtitle_result:
              type: string
            success:
              type: boolean
          selected: false
          title: "字幕生成"
          type: code
          variables:
            - value_selector:
                - generate_script
                - text
              variable: video_script
            - value_selector:
                - validate_input
                - validated_params
              variable: validated_params
        height: 54
        id: subtitle_generation
        position:
          x: 992
          y: 282
        positionAbsolute:
          x: 992
          y: 282
        selected: false
        type: code
        width: 244

      # 节点6: BGM生成
      - data:
          code: |
            import json
            import time
            
            def main(video_script: str, validated_params: str) -> dict:
                """
                生成背景音乐
                """
                try:
                    script_data = json.loads(video_script)
                    params_data = json.loads(validated_params)
                    
                    if not params_data.get("enable_bgm", True):
                        return {
                            "bgm_result": json.dumps({"enabled": False}),
                            "success": True
                        }
                    
                    bgm_style = script_data.get("bgm_style", "轻松愉快")
                    duration = params_data.get("video_duration", 30)
                    
                    bgm_result = {
                        "bgm_url": f"/tmp/bgm_{int(time.time())}.mp3",
                        "style": bgm_style,
                        "duration": duration,
                        "volume": 0.3
                    }
                    
                    return {
                        "bgm_result": json.dumps(bgm_result),
                        "success": True
                    }
                except Exception as e:
                    return {
                        "bgm_result": json.dumps({"error": str(e)}),
                        "success": False
                    }
          desc: "生成背景音乐"
          outputs:
            bgm_result:
              type: string
            success:
              type: boolean
          selected: false
          title: "BGM生成"
          type: code
          variables:
            - value_selector:
                - generate_script
                - text
              variable: video_script
            - value_selector:
                - validate_input
                - validated_params
              variable: validated_params
        height: 54
        id: bgm_generation
        position:
          x: 992
          y: 382
        positionAbsolute:
          x: 992
          y: 382
        selected: false
        type: code
        width: 244

      # 节点7: 视觉素材生成
      - data:
          code: |
            import json
            import time
            
            def main(video_script: str, validated_params: str) -> dict:
                """
                生成视觉素材
                """
                try:
                    script_data = json.loads(video_script)
                    params_data = json.loads(validated_params)
                    
                    visual_materials = []
                    
                    for i, scene in enumerate(script_data.get("scenes", [])):
                        visual_desc = scene.get("visual_description", "")
                        material = {
                            "scene_id": scene.get("id", i + 1),
                            "type": "image",
                            "description": visual_desc,
                            "url": f"/tmp/visual_{i+1}_{int(time.time())}.jpg",
                            "duration": scene.get("duration", 5)
                        }
                        visual_materials.append(material)
                    
                    visual_result = {
                        "materials": visual_materials,
                        "total_count": len(visual_materials)
                    }
                    
                    return {
                        "visual_result": json.dumps(visual_result),
                        "success": True
                    }
                except Exception as e:
                    return {
                        "visual_result": json.dumps({"error": str(e)}),
                        "success": False
                    }
          desc: "生成视觉素材"
          outputs:
            visual_result:
              type: string
            success:
              type: boolean
          selected: false
          title: "视觉素材生成"
          type: code
          variables:
            - value_selector:
                - generate_script
                - text
              variable: video_script
            - value_selector:
                - validate_input
                - validated_params
              variable: validated_params
        height: 54
        id: visual_materials
        position:
          x: 992
          y: 482
        positionAbsolute:
          x: 992
          y: 482
        selected: false
        type: code
        width: 244

      # 节点8: 创建CapCut草稿
      - data:
          api: "{{#env.CAPCUT_API_URL#}}/create_draft"
          body:
            data: "{{#validate_input.validated_params#}}"
            script: "{{#generate_script.text#}}"
          desc: "调用CapCut API创建视频草稿"
          headers:
            Content-Type: application/json
          method: post
          selected: false
          timeout:
            max_connect_timeout: 300
            max_read_timeout: 600
            max_write_timeout: 600
          title: "创建草稿"
          type: http-request
          variables:
            - value_selector:
                - validate_input
                - validated_params
              variable: validated_params
            - value_selector:
                - generate_script
                - text
              variable: script_data
        height: 54
        id: create_draft
        position:
          x: 1296
          y: 282
        positionAbsolute:
          x: 1296
          y: 282
        selected: false
        type: http-request
        width: 244

      # 节点9: 时间轴组装
      - data:
          code: |
            import json
            import time
            
            def main(draft_response: str, tts_result: str, subtitle_result: str, 
                    bgm_result: str, visual_result: str) -> dict:
                """
                组装视频时间轴
                """
                try:
                    draft_data = json.loads(draft_response)
                    tts_data = json.loads(tts_result)
                    subtitle_data = json.loads(subtitle_result)
                    bgm_data = json.loads(bgm_result)
                    visual_data = json.loads(visual_result)
                    
                    timeline = {
                        "draft_id": draft_data.get("draft_id"),
                        "tracks": {
                            "video": visual_data.get("materials", []),
                            "audio": [tts_data],
                            "bgm": [bgm_data] if bgm_data.get("enabled", True) else [],
                            "subtitle": subtitle_data.get("subtitles", [])
                        },
                        "total_duration": max(
                            tts_data.get("duration", 0),
                            subtitle_data.get("total_duration", 0)
                        )
                    }
                    
                    return {
                        "timeline_result": json.dumps(timeline),
                        "success": True
                    }
                except Exception as e:
                    return {
                        "timeline_result": json.dumps({"error": str(e)}),
                        "success": False
                    }
          desc: "组装视频时间轴"
          outputs:
            timeline_result:
              type: string
            success:
              type: boolean
          selected: false
          title: "时间轴组装"
          type: code
          variables:
            - value_selector:
                - create_draft
                - body
              variable: draft_response
            - value_selector:
                - tts_generation
                - tts_result
              variable: tts_result
            - value_selector:
                - subtitle_generation
                - subtitle_result
              variable: subtitle_result
            - value_selector:
                - bgm_generation
                - bgm_result
              variable: bgm_result
            - value_selector:
                - visual_materials
                - visual_result
              variable: visual_result
        height: 54
        id: timeline_assembly
        position:
          x: 1600
          y: 282
        positionAbsolute:
          x: 1600
          y: 282
        selected: false
        type: code
        width: 244

      # 节点10: 音频混合
      - data:
          code: |
            import json
            
            def main(timeline_result: str) -> dict:
                """
                音频混合处理
                """
                try:
                    timeline_data = json.loads(timeline_result)
                    
                    audio_tracks = timeline_data.get("tracks", {})
                    mixed_audio = {
                        "main_audio": audio_tracks.get("audio", []),
                        "bgm": audio_tracks.get("bgm", []),
                        "mixed_file": f"/tmp/mixed_audio_{int(time.time())}.mp3",
                        "total_duration": timeline_data.get("total_duration", 30)
                    }
                    
                    return {
                        "audio_result": json.dumps(mixed_audio),
                        "success": True
                    }
                except Exception as e:
                    return {
                        "audio_result": json.dumps({"error": str(e)}),
                        "success": False
                    }
          desc: "混合音频轨道"
          outputs:
            audio_result:
              type: string
            success:
              type: boolean
          selected: false
          title: "音频混合"
          type: code
          variables:
            - value_selector:
                - timeline_assembly
                - timeline_result
              variable: timeline_result
        height: 54
        id: audio_mixing
        position:
          x: 1904
          y: 282
        positionAbsolute:
          x: 1904
          y: 282
        selected: false
        type: code
        width: 244

      # 节点11: 字幕对齐
      - data:
          code: |
            import json
            
            def main(timeline_result: str, audio_result: str) -> dict:
                """
                字幕时间对齐
                """
                try:
                    timeline_data = json.loads(timeline_result)
                    audio_data = json.loads(audio_result)
                    
                    subtitles = timeline_data.get("tracks", {}).get("subtitle", [])
                    aligned_subtitles = []
                    
                    for subtitle in subtitles:
                        aligned_subtitle = subtitle.copy()
                        # 这里可以添加更精确的时间对齐逻辑
                        aligned_subtitles.append(aligned_subtitle)
                    
                    alignment_result = {
                        "aligned_subtitles": aligned_subtitles,
                        "subtitle_file": f"/tmp/aligned_subtitle_{int(time.time())}.srt"
                    }
                    
                    return {
                        "alignment_result": json.dumps(alignment_result),
                        "success": True
                    }
                except Exception as e:
                    return {
                        "alignment_result": json.dumps({"error": str(e)}),
                        "success": False
                    }
          desc: "对齐字幕时间"
          outputs:
            alignment_result:
              type: string
            success:
              type: boolean
          selected: false
          title: "字幕对齐"
          type: code
          variables:
            - value_selector:
                - timeline_assembly
                - timeline_result
              variable: timeline_result
            - value_selector:
                - audio_mixing
                - audio_result
              variable: audio_result
        height: 54
        id: subtitle_alignment
        position:
          x: 2208
          y: 282
        positionAbsolute:
          x: 2208
          y: 282
        selected: false
        type: code
        width: 244

      # 节点12: 提交渲染
      - data:
          api: "{{#env.CAPCUT_API_URL#}}/submit_render"
          body:
            draft_id: "{{#create_draft.body#}}"
            timeline: "{{#timeline_assembly.timeline_result#}}"
            audio: "{{#audio_mixing.audio_result#}}"
            subtitles: "{{#subtitle_alignment.alignment_result#}}"
          desc: "提交视频渲染任务"
          headers:
            Content-Type: application/json
          method: post
          selected: false
          timeout:
            max_connect_timeout: 300
            max_read_timeout: 600
            max_write_timeout: 600
          title: "提交渲染"
          type: http-request
          variables:
            - value_selector:
                - create_draft
                - body
              variable: draft_id
            - value_selector:
                - timeline_assembly
                - timeline_result
              variable: timeline_data
            - value_selector:
                - audio_mixing
                - audio_result
              variable: audio_data
            - value_selector:
                - subtitle_alignment
                - alignment_result
              variable: subtitle_data
        height: 54
        id: submit_render
        position:
          x: 2512
          y: 282
        positionAbsolute:
          x: 2512
          y: 282
        selected: false
        type: http-request
        width: 244

      # 节点13: 进度监控
      - data:
          code: |
            import json
            import time
            
            def main(render_response: str) -> dict:
                """
                监控渲染进度
                """
                try:
                    render_data = json.loads(render_response)
                    render_id = render_data.get("render_id")
                    
                    # 这里应该实现实际的进度查询逻辑
                    progress_result = {
                        "render_id": render_id,
                        "status": "completed",
                        "progress": 100,
                        "video_url": f"/tmp/final_video_{int(time.time())}.mp4",
                        "completion_time": int(time.time())
                    }
                    
                    return {
                        "progress_result": json.dumps(progress_result),
                        "final_video_url": progress_result["video_url"],
                        "success": True
                    }
                except Exception as e:
                    return {
                        "progress_result": json.dumps({"error": str(e)}),
                        "final_video_url": "",
                        "success": False
                    }
          desc: "监控渲染进度"
          outputs:
            progress_result:
              type: string
            final_video_url:
              type: string
            success:
              type: boolean
          selected: false
          title: "进度监控"
          type: code
          variables:
            - value_selector:
                - submit_render
                - body
              variable: render_response
        height: 54
        id: monitor_progress
        position:
          x: 2816
          y: 282
        positionAbsolute:
          x: 2816
          y: 282
        selected: false
        type: code
        width: 244

      # 节点14: 结束节点
      - data:
          desc: "工作流完成，输出最终结果"
          outputs:
            - value_selector:
                - monitor_progress
                - final_video_url
              variable: final_video_url
            - value_selector:
                - monitor_progress
                - progress_result
              variable: progress_details
          selected: false
          title: "完成"
          type: end
        height: 54
        id: end
        position:
          x: 3120
          y: 282
        positionAbsolute:
          x: 3120
          y: 282
        selected: false
        type: end
        width: 244