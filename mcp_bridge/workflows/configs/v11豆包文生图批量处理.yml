app:
  description: 豆包文生图批量处理优化版工作流。采用并行处理架构，支持图片生成和语音合成同时进行，包含智能重试、事务性处理和资源管理机制。
  icon: 🚀
  icon_background: '#E3F2FD'
  mode: advanced-chat
  name: v11豆包文生图批量处理
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: allenwriter/doubao_image:0.0.1@d9cb638d96848452b8fc2296c61ce93082a5ffa6968a114c15d008cbd4b3730b
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/volcengine_maas:0.0.30@0e6b13a721cc8fb7b928787f86ffc57655ace2cbc938c4738c209d70b18a85f8
kind: app
version: 0.4.0
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: api_base_url
    name: api_base_url
    selector:
    - env
    - api_base_url
    value: http://8.148.70.18:9000
    value_type: string
  - description: 图片开始时间偏移量（秒）
    id: image_start_offset
    name: image_start_offset
    selector:
    - env
    - image_start_offset
    value: '0.05'
    value_type: string
  - description: 最小媒体持续时间（秒）
    id: min_media_duration
    name: min_media_duration
    selector:
    - env
    - min_media_duration
    value: '0.1'
    value_type: string
  - description: 重试基础延迟时间（秒）
    id: retry_base_delay
    name: retry_base_delay
    selector:
    - env
    - retry_base_delay
    value: '1'
    value_type: string
  features:
    file_upload:
      allowed_file_extensions: []
      allowed_file_types: []
      allowed_file_upload_methods: []
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 5
    opening_statement: '🚀 欢迎使用豆包文生图批量处理工具-优化版！


      ⚡ **性能优化**： - 🔄 并行处理：图片生成和语音合成同时进行，大幅提升处理速度 - 🛡️ 智能重试：指数退避算法，API限流感知 - 🔧 事务性处理：自动资源清理，支持部分重试
      - ⏱️ 配置化时间同步：灵活的媒体对齐策略


      📋 **核心功能**： - 🎬 自动生成短视频脚本并转换为SRT字幕 - 🖼️ 基于字幕内容批量生成高质量图像 - ✨ 智能提示词优化，支持多种艺术风格
      - 📊 详细的处理进度和结果统计 - 🎵 完整的视频合成流水线


      💡 **使用方法**： 1. 输入您的视频主题或脚本内容 2. 选择图像尺寸和风格（realistic/anime/oil_painting等） 3.
      设置批处理大小和重试次数 4. 点击开始，享受高效的并行处理体验！


      🎯 新版本处理速度提升50%+，错误处理更智能！'
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        sourceType: if-else
        targetType: code
      id: 1760603125046-true-17606215510130-target
      selected: false
      source: '1760603125046'
      sourceHandle: 'true'
      target: '17606215510130'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        sourceType: tool
        targetType: code
      id: 1760603213982-source-17606215510130-target
      selected: false
      source: '1760603213982'
      sourceHandle: source
      target: '17606215510130'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: start
        targetType: llm
      id: start_1-source-1760621763757-target
      selected: false
      source: start_1
      sourceHandle: source
      target: '1760621763757'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: llm
      id: 1760621763757-source-1760621945531-target
      selected: false
      source: '1760621763757'
      sourceHandle: source
      target: '1760621945531'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: llm
        targetType: code
      id: 1760621945531-source-1760622014513-target
      selected: false
      source: '1760621945531'
      sourceHandle: source
      target: '1760622014513'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: code
      id: 1760622014513-source-code_input_validation-target
      selected: false
      source: '1760622014513'
      sourceHandle: source
      target: code_input_validation
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: code
      id: code_input_validation-source-parallel_gateway-target
      selected: false
      source: code_input_validation
      sourceHandle: source
      target: parallel_gateway
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: iteration
      id: parallel_gateway-source-1760602669786-target
      selected: false
      source: parallel_gateway
      sourceHandle: source
      target: '1760602669786'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: iteration
        targetType: code
      id: 1760602669786-source-sync_gateway-target
      selected: false
      source: '1760602669786'
      sourceHandle: source
      target: sync_gateway
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: code
      id: sync_gateway-source-code_aggregate_results-target
      selected: false
      source: sync_gateway
      sourceHandle: source
      target: code_aggregate_results
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: http-request
      id: code_aggregate_results-source-1761041582774-target
      selected: false
      source: code_aggregate_results
      sourceHandle: source
      target: '1761041582774'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: http-request
        targetType: code
      id: 1761041582774-source-1761042052305-target
      selected: false
      source: '1761041582774'
      sourceHandle: source
      target: '1761042052305'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: http-request
        targetType: http-request
      id: 17610437227200-source-17610437271090-target
      selected: false
      source: '17610437227200'
      sourceHandle: source
      target: '17610437271090'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: iteration
      id: parallel_gateway-source-1761044157730-target
      selected: false
      source: parallel_gateway
      sourceHandle: source
      target: '1761044157730'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1761044157730'
        sourceType: iteration-start
        targetType: tool
      id: 1761044157730start-source-1761044198738-target
      selected: false
      source: 1761044157730start
      sourceHandle: source
      target: '1761044198738'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1761044157730'
        sourceType: tool
        targetType: code
      id: 1761044198738-source-1761044567218-target
      selected: false
      source: '1761044198738'
      sourceHandle: source
      target: '1761044567218'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1761044157730'
        sourceType: code
        targetType: code
      id: 1761044567218-source-1761044999999-target
      selected: false
      source: '1761044567218'
      sourceHandle: source
      target: '1761044999999'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInLoop: false
        sourceType: code
        targetType: code
      id: 1761042052305-source-17610450813550-target
      source: '1761042052305'
      sourceHandle: source
      target: '17610450813550'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: code
      id: 17610450813550-source-code_batch_add_images-target
      source: '17610450813550'
      sourceHandle: source
      target: code_batch_add_images
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: iteration
        targetType: code
      id: 1761044157730-source-sync_gateway-target
      selected: false
      source: '1761044157730'
      sourceHandle: source
      target: sync_gateway
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: http-request
        targetType: http-request
      id: 17610437271090-source-17610453130500-target
      source: '17610437271090'
      sourceHandle: source
      target: '17610453130500'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 1761045650096-source-answer_1-target
      source: '1761045650096'
      sourceHandle: source
      target: answer_1
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: http-request
        targetType: code
      id: 17610453130500-source-1761045650096-target
      source: '17610453130500'
      sourceHandle: source
      target: '1761045650096'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        sourceType: iteration-start
        targetType: llm
      id: 1760602669786start-source-17606223903400-target
      source: 1760602669786start
      sourceHandle: source
      target: '17606223903400'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        sourceType: llm
        targetType: tool
      id: 17606223903400-source-1760602895868-target
      source: '17606223903400'
      sourceHandle: source
      target: '1760602895868'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        sourceType: tool
        targetType: code
      id: 1760602895868-source-1760999999001-target
      source: '1760602895868'
      sourceHandle: source
      target: '1760999999001'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        sourceType: code
        targetType: code
      id: 1760999999001-source-1760602942927-target
      source: '1760999999001'
      sourceHandle: source
      target: '1760602942927'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        sourceType: code
        targetType: if-else
      id: 1760602942927-source-1760603125046-target
      source: '1760602942927'
      sourceHandle: source
      target: '1760603125046'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        sourceType: if-else
        targetType: tool
      id: 1760603125046-retry-1760603213982-target
      source: '1760603125046'
      sourceHandle: retry
      target: '1760603213982'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        sourceType: if-else
        targetType: code
      id: 1760603125046-328e3dc0-d189-4b54-b120-17bd316652e1-17606215510130-target
      source: '1760603125046'
      sourceHandle: 328e3dc0-d189-4b54-b120-17bd316652e1
      target: '17606215510130'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: code
      id: code_batch_add_images-source-1761461437058-target
      source: code_batch_add_images
      sourceHandle: source
      target: '1761461437058'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: http-request
      id: 1761461437058-source-17610437227200-target
      source: '1761461437058'
      sourceHandle: source
      target: '17610437227200'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables:
        - default: 1024x1024
          label: 图像尺寸
          max_length: 20
          options:
          - 512x512
          - 1024x1024
          - 1024x768
          - 768x1024
          required: false
          type: select
          variable: image_size
        - default: realistic
          label: 图像风格
          max_length: 20
          options:
          - realistic
          - anime
          - oil_painting
          - watercolor
          - sketch
          required: false
          type: select
          variable: image_style
        - default: '3'
          label: 批处理大小
          max_length: 10
          options: []
          required: false
          type: number
          variable: batch_size
        - default: '1'
          label: 最大重试次数
          max_length: 10
          options: []
          required: false
          type: number
          variable: max_retries
        - default: ''
          hint: ''
          label: 脚本/主题
          max_length: 256
          options: []
          placeholder: ''
          required: true
          type: text-input
          variable: prompt
        - default: '5'
          hint: ''
          label: 时长（秒）
          max_length: 48
          options:
          - '5'
          - '10'
          - '15'
          - '30'
          - '60'
          placeholder: ''
          required: true
          type: select
          variable: duration
        - default: '1080'
          hint: ''
          label: 画面宽度
          max_length: 10
          options: []
          placeholder: ''
          required: true
          type: text-input
          variable: width
        - default: '1920'
          hint: ''
          label: 画面高度
          max_length: 10
          options: []
          placeholder: ''
          required: true
          type: text-input
          variable: height
        - default: SourceHanSansCN_Regular
          hint: ''
          label: 字体（字幕/标题）
          max_length: 48
          options:
          - SourceHanSansCN_Regular
          - SourceHanSansCN_Bold
          - MiSans_Regular
          - HarmonyOS_Sans_SC_Regular
          placeholder: ''
          required: true
          type: select
          variable: font
        - default: zh_male_dongfanghaoran_moon_bigtts
          hint: ''
          label: 旁白音色
          max_length: 48
          options:
          - zh_male_dongfanghaoran_moon_bigtts
          - zh_female_tianmei_moon_bigtts
          - zh_male_zhigang_moon_bigtts
          - zh_female_siyue_moon_bigtts
          - zh_male_kaikai_moon_bigtts
          - zh_female_xiaoyu_moon_bigtts
          - zh_male_zhengqi_moon_bigtts
          - zh_female_xiaomo_moon_bigtts
          - zh_male_zhihao_moon_bigtts
          - zh_female_xiaoxin_moon_bigtts
          placeholder: ''
          required: false
          type: select
          variable: tts_voice
        - default: https://sf16-ies-music-va.tiktokcdn.com/obj/tos-useast2a-ve-2774/oQeNAeaxIwAEtoADBAjwbzEfwbDrD6AhAjBzAn/?filename=7426692799697693483.mp3&br=128&tat=0&aid=6383
          hint: ''
          label: BGM 音频URL（可选）
          max_length: 512
          options: []
          placeholder: ''
          required: false
          type: text-input
          variable: bgm_url
      height: 347
      id: start_1
      position:
        x: 30
        y: 423
      positionAbsolute:
        x: 30
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        code: "def main(valid: bool, srt_array: list, config: dict, validation_info:\
          \ str) -> dict:\n    \"\"\"\n    并行网关：验证输入并准备启动并行处理分支\n    \n    功能说明：\n\
          \    1. 接收输入验证结果\n    2. 检查数据有效性\n    3. 准备并行处理的配置\n    4. 为文生图和语音合成两个并行分支提供数据\n\
          \    \n    Args:\n        valid: 输入验证结果\n        srt_array: SRT字幕数组\n  \
          \      config: 配置参数\n        validation_info: 验证信息\n        \n    Returns:\n\
          \        包含SRT数组、配置和分支数据的字典，供并行分支使用\n    \"\"\"\n    import logging\n  \
          \  import time\n    from datetime import datetime\n    \n    # 记录开始时间\n\
          \    start_time = datetime.now().strftime(\"%H:%M:%S\")\n    transaction_id\
          \ = f\"gateway_{int(time.time() * 1000)}\"\n    \n    logging.info(f\"\U0001F6AA\
          \ 并行网关 [{transaction_id}]: 接收到 {len(srt_array) if srt_array else 0} 个字幕段落\"\
          )\n    \n    # 验证输入\n    if not valid:\n        error_msg = \"输入验证失败，无法启动并行处理\"\
          \n        logging.error(f\"❌ 并行网关: {error_msg}\")\n        return {\n  \
          \          \"success\": False,\n            \"error\": error_msg,\n    \
          \        \"error_type\": \"validation_failed\",\n            \"error_details\"\
          : {\"reason\": \"输入验证失败\", \"valid\": valid},\n            \"srt_array\"\
          : [],\n            \"config\": config or {},\n            \"branch_data\"\
          : {},\n            \"start_time\": start_time,\n            \"transaction_id\"\
          : transaction_id,\n            \"total_items\": 0,\n            \"validation_info\"\
          : validation_info,\n            \"progress_info\": \"❌ 输入验证失败\",\n     \
          \       \"recovery_info\": \"请检查输入数据\",\n            \"performance_info\"\
          : {\"status\": \"failed\"},\n            \"resource_status\": {\"allocated\"\
          : False}\n        }\n    \n    if not srt_array or len(srt_array) == 0:\n\
          \        error_msg = \"SRT数组为空，无法处理\"\n        logging.error(f\"❌ 并行网关:\
          \ {error_msg}\")\n        return {\n            \"success\": False,\n  \
          \          \"error\": error_msg,\n            \"error_type\": \"empty_data\"\
          ,\n            \"error_details\": {\"reason\": \"SRT数组为空\", \"length\":\
          \ 0},\n            \"srt_array\": [],\n            \"config\": config or\
          \ {},\n            \"branch_data\": {},\n            \"start_time\": start_time,\n\
          \            \"transaction_id\": transaction_id,\n            \"total_items\"\
          : 0,\n            \"validation_info\": validation_info,\n            \"\
          progress_info\": \"❌ SRT数组为空\",\n            \"recovery_info\": \"请提供有效的SRT数据\"\
          ,\n            \"performance_info\": {\"status\": \"failed\"},\n       \
          \     \"resource_status\": {\"allocated\": False}\n        }\n    \n   \
          \ # 准备并行处理数据\n    total_items = len(srt_array)\n    \n    # 准备分支数据\n   \
          \ branch_data = {\n        \"image_branch\": {\n            \"enabled\"\
          : True,\n            \"items\": total_items,\n            \"config\": config\n\
          \        },\n        \"audio_branch\": {\n            \"enabled\": True,\n\
          \            \"items\": total_items,\n            \"config\": config\n \
          \       }\n    }\n    \n    logging.info(f\"✅ 并行网关 [{transaction_id}]: 准备启动并行处理\"\
          )\n    logging.info(f\"   - 文生图分支: {total_items} 个任务\")\n    logging.info(f\"\
          \   - 语音合成分支: {total_items} 个任务\")\n    logging.info(f\"   - 配置: {config}\"\
          )\n    \n    # 返回数据供并行分支使用\n    return {\n        \"success\": True,\n \
          \       \"error\": \"\",\n        \"error_type\": \"\",\n        \"error_details\"\
          : {},\n        \"srt_array\": srt_array,\n        \"config\": config,\n\
          \        \"branch_data\": branch_data,\n        \"start_time\": start_time,\n\
          \        \"transaction_id\": transaction_id,\n        \"total_items\": total_items,\n\
          \        \"validation_info\": validation_info,\n        \"progress_info\"\
          : f\"✓ 并行网关准备就绪 - 启动 {total_items} 个并行任务\",\n        \"recovery_info\":\
          \ \"\",\n        \"performance_info\": {\n            \"status\": \"ready\"\
          ,\n            \"preparation_time\": \"0.001s\"\n        },\n        \"\
          resource_status\": {\n            \"allocated\": True,\n            \"image_branch_ready\"\
          : True,\n            \"audio_branch_ready\": True\n        }\n    }\n"
        code_language: python3
        desc: 并行网关，分发数据到图片生成和语音合成分支
        outputs:
          branch_data:
            children: null
            type: object
          config:
            children: null
            type: object
          error:
            children: null
            type: string
          error_details:
            children: null
            type: object
          error_type:
            children: null
            type: string
          performance_info:
            children: null
            type: object
          progress_info:
            children: null
            type: string
          recovery_info:
            children: null
            type: string
          resource_status:
            children: null
            type: object
          srt_array:
            children: null
            type: array[object]
          start_time:
            children: null
            type: string
          success:
            children: null
            type: boolean
          total_items:
            children: null
            type: number
          transaction_id:
            children: null
            type: string
          validation_info:
            children: null
            type: string
        selected: false
        title: 并行网关
        type: code
        variables:
        - value_selector:
          - code_input_validation
          - valid
          value_type: boolean
          variable: valid
        - value_selector:
          - code_input_validation
          - srt_array
          value_type: array[object]
          variable: srt_array
        - value_selector:
          - code_input_validation
          - config
          value_type: object
          variable: config
        - value_selector:
          - code_input_validation
          - validation_info
          value_type: string
          variable: validation_info
      height: 95
      id: parallel_gateway
      position:
        x: 1540
        y: 423
      positionAbsolute:
        x: 1540
        y: 423
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        code: "def main(srt_array: list, image_size: str, image_style: str, batch_size:\
          \ int, max_retries: int) -> dict:\n    \"\"\"\n    验证输入参数的有效性并提供详细的验证反馈\n\
          \    \n    功能说明：\n    1. 检查 srt_array 是否为空\n    2. 验证 image_size、image_style\
          \ 等参数是否有效\n    3. 设置默认值\n    4. 返回验证后的配置\n    5. 验证SRT数组中每个项目的结构\n    6.\
          \ 提供详细的SRT解析状态信息\n    \n    Args:\n        srt_array: SRT字幕数组\n        image_size:\
          \ 图像尺寸\n        image_style: 图像风格\n        batch_size: 批处理大小\n        max_retries:\
          \ 最大重试次数\n        \n    Returns:\n        验证后的配置字典\n    \"\"\"\n    import\
          \ logging\n    import json\n    \n    validation_messages = []\n    warnings\
          \ = []\n    \n    # 检查 srt_array 是否为空\n    if not srt_array or len(srt_array)\
          \ == 0:\n        return {\n            \"valid\": False,\n            \"\
          error\": \"❌ SRT数组为空，无法处理。请确保已正确解析SRT字幕文件。\",\n            \"srt_array\"\
          : [],\n            \"config\": {},\n            \"validation_info\": \"\
          SRT数据验证失败\",\n            \"warnings\": []\n        }\n    \n    validation_messages.append(f\"\
          ✅ 成功接收到SRT数组，包含 {len(srt_array)} 个字幕段落\")\n    \n    # 验证SRT数组中的每个项目\n \
          \   valid_items = 0\n    for i, item in enumerate(srt_array):\n        if\
          \ not isinstance(item, dict):\n            return {\n                \"\
          valid\": False,\n                \"error\": f\"❌ SRT数组第{i+1}项不是有效的对象格式\"\
          ,\n                \"srt_array\": [],\n                \"config\": {},\n\
          \                \"validation_info\": f\"数据格式验证失败：第{i+1}项\",\n         \
          \       \"warnings\": warnings\n            }\n        \n        required_keys\
          \ = [\"index\", \"timestamp\", \"text\"]\n        missing_keys = []\n  \
          \      for key in required_keys:\n            if key not in item:\n    \
          \            missing_keys.append(key)\n        \n        if missing_keys:\n\
          \            return {\n                \"valid\": False,\n             \
          \   \"error\": f\"❌ SRT数组第{i+1}项缺少必需字段: {', '.join(missing_keys)}\",\n \
          \               \"srt_array\": [],\n                \"config\": {},\n  \
          \              \"validation_info\": f\"字段验证失败：第{i+1}项缺少{', '.join(missing_keys)}\"\
          ,\n                \"warnings\": warnings\n            }\n        \n   \
          \     # 检查文本内容\n        if not item.get('text', '').strip():\n         \
          \   warnings.append(f\"⚠️ 第{i+1}项文本内容为空\")\n        else:\n            valid_items\
          \ += 1\n    \n    validation_messages.append(f\"✅ SRT数据结构验证通过，{valid_items}\
          \ 个有效字幕段落\")\n    \n    # 验证图像尺寸\n    valid_sizes = [\"512x512\", \"1024x1024\"\
          , \"1024x768\", \"768x1024\"]\n    if image_size not in valid_sizes:\n \
          \       return {\n            \"valid\": False,\n            \"error\":\
          \ f\"❌ 无效的图像尺寸: {image_size}\\n支持的尺寸: {', '.join(valid_sizes)}\",\n    \
          \        \"srt_array\": [],\n            \"config\": {},\n            \"\
          validation_info\": f\"图像尺寸验证失败：{image_size}\",\n            \"warnings\"\
          : warnings\n        }\n    \n    validation_messages.append(f\"✅ 图像尺寸验证通过：{image_size}\"\
          )\n    \n    # 验证图像风格\n    valid_styles = [\"realistic\", \"anime\", \"\
          oil_painting\", \"watercolor\", \"sketch\"]\n    if image_style not in valid_styles:\n\
          \        return {\n            \"valid\": False,\n            \"error\"\
          : f\"❌ 无效的图像风格: {image_style}\\n支持的风格: {', '.join(valid_styles)}\",\n  \
          \          \"srt_array\": [],\n            \"config\": {},\n           \
          \ \"validation_info\": f\"图像风格验证失败：{image_style}\",\n            \"warnings\"\
          : warnings\n        }\n    \n    validation_messages.append(f\"✅ 图像风格验证通过：{image_style}\"\
          )\n    \n    # 设置默认值并验证范围\n    final_batch_size = max(1, min(int(batch_size)\
          \ if batch_size else 3, 10))\n    final_max_retries = max(0, min(int(max_retries)\
          \ if max_retries else 1, 3))\n    \n    if final_batch_size != batch_size:\n\
          \        warnings.append(f\"⚠️ 批处理大小已调整为 {final_batch_size} (原值: {batch_size})\"\
          )\n    \n    if final_max_retries != max_retries:\n        warnings.append(f\"\
          ⚠️ 最大重试次数已调整为 {final_max_retries} (原值: {max_retries})\")\n    \n    validated_config\
          \ = {\n        \"image_size\": image_size,\n        \"image_style\": image_style,\n\
          \        \"batch_size\": final_batch_size,\n        \"max_retries\": final_max_retries,\n\
          \        \"total_count\": len(srt_array),\n        \"valid_items\": valid_items,\n\
          \        \"estimated_batches\": (len(srt_array) + final_batch_size - 1)\
          \ // final_batch_size\n    }\n    \n    validation_messages.append(f\"✅\
          \ 参数配置完成：批处理大小={final_batch_size}，最大重试={final_max_retries}\")\n    validation_messages.append(f\"\
          \U0001F4CA 处理计划：{len(srt_array)} 个字幕段落，预计分 {validated_config['estimated_batches']}\
          \ 批处理\")\n    \n    validation_info = \"\\n\".join(validation_messages)\n\
          \    if warnings:\n        validation_info += \"\\n\\n⚠️ 警告信息：\\n\" + \"\
          \\n\".join(warnings)\n    \n    # 返回验证结果\n    return {\n        \"valid\"\
          : True,\n        \"error\": \"\",\n        \"srt_array\": srt_array,\n \
          \       \"config\": validated_config,\n        \"validation_info\": validation_info,\n\
          \        \"warnings\": warnings\n    }\n"
        code_language: python3
        desc: 验证输入参数的有效性，设置默认值
        outputs:
          config:
            children: null
            type: object
          error:
            children: null
            type: string
          srt_array:
            children: null
            type: array[object]
          valid:
            children: null
            type: boolean
          validation_info:
            children: null
            type: string
          warnings:
            children: null
            type: array[string]
        selected: false
        title: 输入参数验证
        type: code
        variables:
        - value_selector:
          - '1760622014513'
          - srt_array
          value_type: array[object]
          variable: srt_array
        - value_selector:
          - start_1
          - image_size
          value_type: string
          variable: image_size
        - value_selector:
          - start_1
          - image_style
          value_type: string
          variable: image_style
        - value_selector:
          - start_1
          - batch_size
          value_type: number
          variable: batch_size
        - value_selector:
          - start_1
          - max_retries
          value_type: number
          variable: max_retries
      height: 79
      id: code_input_validation
      position:
        x: 1238
        y: 423
      positionAbsolute:
        x: 1238
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        code: "def main(image_results: list = None, audio_results: list = None) ->\
          \ dict:\n    \"\"\"\n    增强的同步网关：等待并行分支完成，合并结果，包含事务性处理\n    \n    功能说明：\n\
          \    1. 接收两个并行分支的结果\n    2. 验证两个分支都已完成\n    3. 合并结果并传递给聚合节点\n    4. 提供同步状态信息\n\
          \    5. 事务性处理和错误恢复\n    \n    Args:\n        image_results: 图像生成分支的结果列表\n\
          \        audio_results: 语音合成分支的结果列表\n        \n    Returns:\n        合并后的结果，包含两个分支的数据\n\
          \    \"\"\"\n    import logging\n    import time\n    import traceback\n\
          \    from datetime import datetime\n    from enum import Enum\n    \n  \
          \  class ErrorType(Enum):\n        VALIDATION_ERROR = \"validation_error\"\
          \n        SYNC_ERROR = \"sync_error\"\n        DATA_ERROR = \"data_error\"\
          \n        SYSTEM_ERROR = \"system_error\"\n    \n    def classify_error(error):\n\
          \        \"\"\"分类错误类型\"\"\"\n        error_str = str(error).lower()\n  \
          \      if \"validation\" in error_str or \"invalid\" in error_str:\n   \
          \         return ErrorType.VALIDATION_ERROR\n        elif \"sync\" in error_str\
          \ or \"branch\" in error_str:\n            return ErrorType.SYNC_ERROR\n\
          \        elif \"data\" in error_str or \"format\" in error_str:\n      \
          \      return ErrorType.DATA_ERROR\n        else:\n            return ErrorType.SYSTEM_ERROR\n\
          \    \n    def handle_error(error, context=None):\n        \"\"\"处理错误并返回详细信息\"\
          \"\"\n        error_type = classify_error(error)\n        error_info = {\n\
          \            \"error_type\": error_type.value,\n            \"error_message\"\
          : str(error),\n            \"error_class\": error.__class__.__name__,\n\
          \            \"timestamp\": datetime.now().isoformat(),\n            \"\
          context\": context or {},\n            \"traceback\": traceback.format_exc(),\n\
          \            \"severity\": \"high\" if error_type in [ErrorType.SYNC_ERROR,\
          \ ErrorType.SYSTEM_ERROR] else \"medium\"\n        }\n        \n       \
          \ if error_info[\"severity\"] == \"high\":\n            logging.error(f\"\
          ❌ 高级错误: {error_info['error_message']}\")\n        else:\n            logging.warning(f\"\
          ⚠️ 中级错误: {error_info['error_message']}\")\n        \n        return error_info\n\
          \    \n    # 事务开始\n    transaction_id = f\"sync_tx_{int(time.time() * 1000)}\"\
          \n    sync_time = datetime.now().strftime(\"%H:%M:%S\")\n    \n    try:\n\
          \        logging.info(f\"\U0001F504 同步网关事务开始: {transaction_id}\")\n    \
          \    \n        # 验证输入\n        image_count = len(image_results) if image_results\
          \ else 0\n        audio_count = len(audio_results) if audio_results else\
          \ 0\n        \n        logging.info(f\"\U0001F504 同步网关: 图像分支={image_count}个结果,\
          \ 语音分支={audio_count}个结果, 同步时间={sync_time}\")\n        \n        # 检查同步状态\n\
          \        sync_success = image_results is not None and audio_results is not\
          \ None\n        \n        if not sync_success:\n            missing_branches\
          \ = []\n            if image_results is None:\n                missing_branches.append(\"\
          图像分支\")\n            if audio_results is None:\n                missing_branches.append(\"\
          语音分支\")\n            \n            error_msg = f\"并行分支同步失败: {', '.join(missing_branches)}\
          \ 未完成\"\n            raise RuntimeError(error_msg)\n        \n        #\
          \ 数据完整性检查\n        if not isinstance(image_results, list) or not isinstance(audio_results,\
          \ list):\n            raise ValueError(\"分支结果数据格式错误：期望列表类型\")\n        \n\
          \        # 检查数据一致性\n        if image_count > 0 and audio_count > 0 and image_count\
          \ != audio_count:\n            logging.warning(f\"⚠️ 数据不一致：图像结果{image_count}个，音频结果{audio_count}个\"\
          )\n        \n        # 数据质量检查\n        valid_image_count = sum(1 for item\
          \ in image_results if item and isinstance(item, dict))\n        valid_audio_count\
          \ = sum(1 for item in audio_results if item and isinstance(item, dict))\n\
          \        \n        quality_info = {\n            \"image_quality\": valid_image_count\
          \ / image_count if image_count > 0 else 0,\n            \"audio_quality\"\
          : valid_audio_count / audio_count if audio_count > 0 else 0,\n         \
          \   \"overall_quality\": (valid_image_count + valid_audio_count) / (image_count\
          \ + audio_count) if (image_count + audio_count) > 0 else 0\n        }\n\
          \        \n        # 事务提交\n        logging.info(f\"✅ 同步网关事务提交成功: {transaction_id}\"\
          )\n        \n        return {\n            \"success\": True,\n        \
          \    \"transaction_id\": transaction_id,\n            \"sync_status\": \"\
          completed\",\n            \"sync_time\": sync_time,\n            \"image_results\"\
          : image_results,\n            \"audio_results\": audio_results,\n      \
          \      \"sync_info\": f\"✓ 并行分支同步成功 - 图像: {image_count}个, 语音: {audio_count}个\"\
          ,\n            \"total_items\": max(image_count, audio_count),\n       \
          \     \"quality_info\": quality_info,\n            \"data_consistency\"\
          : {\n                \"image_count\": image_count,\n                \"audio_count\"\
          : audio_count,\n                \"valid_image_count\": valid_image_count,\n\
          \                \"valid_audio_count\": valid_audio_count,\n           \
          \     \"consistency_check\": \"passed\" if abs(image_count - audio_count)\
          \ <= 1 else \"warning\"\n            },\n            \"error\": \"\",\n\
          \            \"error_details\": {},\n            \"error_type\": \"\",\n\
          \            \"recovery_info\": \"\",\n        }\n        \n    except Exception\
          \ as e:\n        # 错误处理和事务回滚\n        error_info = handle_error(e, {\n \
          \           \"node\": \"sync_gateway\",\n            \"transaction_id\"\
          : transaction_id,\n            \"image_count\": len(image_results) if image_results\
          \ else 0,\n            \"audio_count\": len(audio_results) if audio_results\
          \ else 0\n        })\n        \n        logging.error(f\"❌ 同步网关事务回滚: {transaction_id}\"\
          )\n        \n        # 清理资源\n        try:\n            if image_results:\n\
          \                logging.info(\"清理图像结果资源\")\n            if audio_results:\n\
          \                logging.info(\"清理音频结果资源\")\n        except Exception as\
          \ cleanup_error:\n            logging.warning(f\"资源清理警告: {str(cleanup_error)}\"\
          )\n        \n        return {\n            \"success\": False,\n       \
          \     \"transaction_id\": transaction_id,\n            \"sync_status\":\
          \ \"failed\",\n            \"sync_time\": sync_time,\n            \"image_results\"\
          : image_results or [],\n            \"audio_results\": audio_results or\
          \ [],\n            \"error\": error_info[\"error_message\"],\n         \
          \   \"error_type\": error_info[\"error_type\"],\n            \"error_details\"\
          : error_info,\n            \"sync_info\": f\"❌ 并行分支同步失败: {error_info['error_message']}\"\
          ,\n            \"recovery_info\": \"已执行资源清理和事务回滚\",\n            \"data_consistency\"\
          : {},\n            \"quality_info\": {},\n            \"total_items\": 0,\n\
          \        }"
        code_language: python3
        desc: 同步网关节点，等待并行分支完成
        outputs:
          audio_results:
            children: null
            type: array[object]
          data_consistency:
            children: null
            type: object
          error:
            children: null
            type: string
          error_details:
            children: null
            type: object
          error_type:
            children: null
            type: string
          image_results:
            children: null
            type: array[object]
          quality_info:
            children: null
            type: object
          recovery_info:
            children: null
            type: string
          success:
            children: null
            type: boolean
          sync_info:
            children: null
            type: string
          sync_status:
            children: null
            type: string
          sync_time:
            children: null
            type: string
          total_items:
            children: null
            type: number
          transaction_id:
            children: null
            type: string
        selected: false
        title: 同步网关
        type: code
        variables:
        - value_selector:
          - '1760602669786'
          - output
          value_type: array[object]
          variable: image_results
        - value_selector:
          - '1761044157730'
          - output
          value_type: array[object]
          variable: audio_results
      height: 79
      id: sync_gateway
      position:
        x: 4217.142857142857
        y: 423
      positionAbsolute:
        x: 4217.142857142857
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        code: "def main(results: list, output: list = None, transaction_id: str =\
          \ \"\") -> dict:\n    \"\"\"\n    简化版聚合结果统计节点\n    保留核心功能，移除复杂的错误处理和统计逻辑\n\
          \    \"\"\"\n    import json\n    import time\n    from datetime import\
          \ datetime\n    \n    # 生成事务ID\n    if not transaction_id:\n        transaction_id\
          \ = f\"agg_{int(time.time() * 1000)}\"[-8:]\n    \n    # 处理空输入\n    if not\
          \ results:\n        return {\n            \"success\": False,\n        \
          \    \"total_count\": 0,\n            \"success_count\": 0,\n          \
          \  \"failed_count\": 0,\n            \"success_rate\": 0.0,\n          \
          \  \"images\": [],\n            \"audios\": [],\n            \"texts\":\
          \ [],\n            \"images_json\": \"[]\",\n            \"audios_json\"\
          : \"[]\",\n            \"texts_json\": \"[]\",\n            \"total_duration\"\
          : 0,\n            \"errors\": [],\n            \"progress_summary\": \"\
          ❌ 没有处理任何数据\",\n            \"aggregation_status\": \"empty\",\n        \
          \    \"audio_url\": [],\n            \"completion_time\": datetime.now().strftime(\"\
          %H:%M:%S\"),\n            \"error_classification\": \"EMPTY_RESULTS\",\n\
          \            \"formatted_audios\": [],\n            \"formatted_images\"\
          : [],\n            \"formatted_texts\": [],\n            \"metrics\": {},\n\
          \            \"performance_info\": {},\n            \"processing_details\"\
          : [],\n            \"recovery_plan\": \"请检查输入数据\",\n            \"retry_count\"\
          : 0,\n            \"retry_details\": [],\n            \"total_duration_sec\"\
          : 0,\n            \"total_retries\": 0,\n            \"transaction_id\"\
          : transaction_id\n        }\n    \n    # 过滤有效结果\n    valid_results = [r\
          \ for r in results if r and isinstance(r, dict)]\n    \n    # 统计成功和失败\n\
          \    success_count = len([r for r in valid_results if r.get('status') ==\
          \ 'success'])\n    failed_count = len(valid_results) - success_count\n \
          \   total_count = len(valid_results)\n    success_rate = round(success_count\
          \ / total_count, 4) if total_count > 0 else 0.0\n    \n    # 收集错误\n    errors\
          \ = []\n    for r in valid_results:\n        if r.get('error'):\n      \
          \      errors.append({\n                \"index\": r.get('index', 0),\n\
          \                \"error\": r.get('error', ''),\n                \"error_type\"\
          : r.get('error_type', 'UNKNOWN')\n            })\n    \n    # 处理音频数据\n \
          \   audios = output if output else []\n    \n    # 格式化图片数据\n    formatted_images\
          \ = []\n    for r in valid_results:\n        if r.get('image_url'):\n  \
          \          formatted_images.append({\n                \"type\": \"image\"\
          ,\n                \"material_url\": r.get('image_url', ''),\n         \
          \       \"duration\": 1.25,  # 默认时长\n                \"start_time\": (r.get('index',\
          \ 1) - 1) * 1.25,\n                \"end_time\": r.get('index', 1) * 1.25\n\
          \            })\n    \n    # 格式化音频数据\n    formatted_audios = []\n    for\
          \ audio in audios:\n        if audio.get('audio_url'):\n            formatted_audios.append({\n\
          \                \"type\": \"audio\",\n                \"material_url\"\
          : audio.get('audio_url', ''),\n                \"duration\": audio.get('duration',\
          \ 1.25),\n                \"start_time\": (audio.get('index', 1) - 1) *\
          \ 1.25,\n                \"end_time\": audio.get('index', 1) * 1.25\n  \
          \          })\n    \n    # 计算总时长\n    total_duration = sum([img.get('duration',\
          \ 1.25) for img in formatted_images])\n    \n    # 生成进度摘要\n    if success_count\
          \ == total_count:\n        status = \"✅ 所有项目处理成功\"\n        aggregation_status\
          \ = \"success\"\n    elif success_count > 0:\n        status = f\"⚠️ 部分成功:\
          \ {success_count}/{total_count}\"\n        aggregation_status = \"partial_success\"\
          \n    else:\n        status = \"❌ 所有项目处理失败\"\n        aggregation_status\
          \ = \"failed\"\n    \n    # 返回结果\n    return {\n        \"success\": success_count\
          \ > 0,\n        \"total_count\": total_count,\n        \"success_count\"\
          : success_count,\n        \"failed_count\": failed_count,\n        \"success_rate\"\
          : success_rate,\n        \"images\": valid_results,\n        \"audios\"\
          : audios,\n        \"texts\": [],\n        \"images_json\": json.dumps(formatted_images,\
          \ ensure_ascii=False),\n        \"audios_json\": json.dumps(formatted_audios,\
          \ ensure_ascii=False),\n        \"texts_json\": \"[]\",\n        \"total_duration\"\
          : total_duration,\n        \"errors\": errors,\n        \"progress_summary\"\
          : status,\n        \"aggregation_status\": aggregation_status,\n       \
          \ \"audio_url\": [a.get('audio_url', '') for a in audios if a.get('audio_url')],\n\
          \        \"completion_time\": datetime.now().strftime(\"%H:%M:%S\"),\n \
          \       \"error_classification\": errors[0].get('error_type', '') if errors\
          \ else '',\n        \"formatted_audios\": formatted_audios,\n        \"\
          formatted_images\": formatted_images,\n        \"formatted_texts\": [],\n\
          \        \"metrics\": {\n            \"total_count\": total_count,\n   \
          \         \"success_count\": success_count,\n            \"failed_count\"\
          : failed_count,\n            \"success_rate\": success_rate\n        },\n\
          \        \"performance_info\": {\n            \"total_duration\": total_duration,\n\
          \            \"average_duration\": round(total_duration / total_count, 2)\
          \ if total_count > 0 else 0\n        },\n        \"processing_details\"\
          : [\n            {\n                \"index\": r.get('index', i+1),\n  \
          \              \"status\": r.get('status', 'unknown'),\n               \
          \ \"has_image\": bool(r.get('image_url')),\n                \"has_error\"\
          : bool(r.get('error'))\n            }\n            for i, r in enumerate(valid_results)\n\
          \        ],\n        \"recovery_plan\": \"请检查失败项目的错误信息\" if failed_count\
          \ > 0 else \"\",\n        \"retry_count\": sum([r.get('retry_count', 0)\
          \ for r in valid_results]),\n        \"retry_details\": [],\n        \"\
          total_duration_sec\": round(total_duration, 2),\n        \"total_retries\"\
          : sum([r.get('retry_count', 0) for r in valid_results]),\n        \"transaction_id\"\
          : transaction_id\n    }\n"
        code_language: python3
        desc: 聚合所有图像生成的结果，统计成功率，处理None值和异常，生成coze格式的时间轴数据
        outputs:
          aggregation_status:
            children: null
            type: string
          audio_url:
            children: null
            type: array[string]
          audios:
            children: null
            type: array[object]
          audios_json:
            children: null
            type: string
          completion_time:
            children: null
            type: string
          error_classification:
            children: null
            type: string
          errors:
            children: null
            type: array[object]
          failed_count:
            children: null
            type: number
          formatted_audios:
            children: null
            type: array[object]
          formatted_images:
            children: null
            type: array[object]
          formatted_texts:
            children: null
            type: array[object]
          images:
            children: null
            type: array[object]
          images_json:
            children: null
            type: string
          metrics:
            children: null
            type: object
          performance_info:
            children: null
            type: object
          processing_details:
            children: null
            type: array[object]
          progress_summary:
            children: null
            type: string
          recovery_plan:
            children: null
            type: string
          retry_count:
            children: null
            type: number
          retry_details:
            children: null
            type: array[object]
          success:
            children: null
            type: boolean
          success_count:
            children: null
            type: number
          success_rate:
            children: null
            type: number
          texts:
            children: null
            type: array[object]
          texts_json:
            children: null
            type: string
          total_count:
            children: null
            type: number
          total_duration:
            children: null
            type: number
          total_duration_sec:
            children: null
            type: number
          total_retries:
            children: null
            type: number
          transaction_id:
            children: null
            type: string
        selected: false
        title: 聚合结果统计
        type: code
        variables:
        - value_selector:
          - sync_gateway
          - image_results
          value_type: array[object]
          variable: results
        - value_selector:
          - sync_gateway
          - audio_results
          value_type: array[object]
          variable: output
      height: 111
      id: code_aggregate_results
      position:
        x: 4522
        y: 423
      positionAbsolute:
        x: 4522
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        answer: "\U0001F3AC **短视频生成完成！**\n✅ **草稿信息**： - 草稿ID：{{#1761045650096.draft_id#}}\
          \ - 保存状态：{{#17610437271090.body#}} \n\U0001F3AF **预览与下载**： - \U0001F4F1\
          \ 草稿预览：{{#1761045650096.preview_url#}} - \U0001F4E5 直接下载：{{#1761045650096.real_download_url#}}\n\
          \U0001F4A1 **使用说明**： 1. 点击\"草稿预览\"链接可在线预览草稿内容和时间轴 2. 预览界面集成了下载功能，支持系统选择和自定义路径\
          \ 3. 可一键保存并上传到OSS，自动生成下载链接"
        selected: false
        title: 输出结果
        type: answer
        variables: []
      height: 303
      id: answer_1
      position:
        x: 7542
        y: 423
      positionAbsolute:
        x: 7542
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        error_handle_mode: terminated
        height: 446
        is_parallel: false
        iterator_input_type: array[object]
        iterator_selector:
        - code_input_validation
        - srt_array
        output_selector:
        - '17606215510130'
        - result
        output_type: array[object]
        parallel_nums: 10
        selected: false
        start_node_id: 1760602669786start
        title: 文生图片
        type: iteration
        width: 2318
      height: 446
      id: '1760602669786'
      position:
        x: 1842
        y: 423
      positionAbsolute:
        x: 1842
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 2318
      zIndex: 1
    - data:
        desc: ''
        isInIteration: true
        selected: false
        title: ''
        type: iteration-start
      draggable: false
      height: 48
      id: 1760602669786start
      parentId: '1760602669786'
      position:
        x: 60
        y: 158.5
      positionAbsolute:
        x: 1902
        y: 581.5
      selectable: false
      sourcePosition: right
      targetPosition: left
      type: custom-iteration-start
      width: 44
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        is_team_authorization: true
        iteration_id: '1760602669786'
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: The text prompt used to generate the image. Doubao will generate
              an image based on this prompt.
            ja_JP: The text prompt used to generate the image. Doubao will generate
              an image based on this prompt.
            pt_BR: The text prompt used to generate the image. Doubao will generate
              an image based on this prompt.
            zh_Hans: The text prompt used to generate the image. Doubao will generate
              an image based on this prompt.
          label:
            en_US: Prompt
            ja_JP: Prompt
            pt_BR: Prompt
            zh_Hans: Prompt
          llm_description: This prompt text will be used to generate image.
          max: null
          min: null
          name: prompt
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: 1024x1024
          form: form
          human_description:
            en_US: The size of the generated image.
            ja_JP: The size of the generated image.
            pt_BR: The size of the generated image.
            zh_Hans: The size of the generated image.
          label:
            en_US: Image Size
            ja_JP: Image Size
            pt_BR: Image Size
            zh_Hans: Image Size
          llm_description: ''
          max: null
          min: null
          name: size
          options:
          - icon: ''
            label:
              en_US: 1024x1024 (Square)
              ja_JP: 1024x1024 (Square)
              pt_BR: 1024x1024 (Square)
              zh_Hans: 1024x1024 (Square)
            value: 1024x1024
          - icon: ''
            label:
              en_US: 1024x1792 (Portrait)
              ja_JP: 1024x1792 (Portrait)
              pt_BR: 1024x1792 (Portrait)
              zh_Hans: 1024x1792 (Portrait)
            value: 1024x1792
          - icon: ''
            label:
              en_US: 1792x1024 (Landscape)
              ja_JP: 1792x1024 (Landscape)
              pt_BR: 1792x1024 (Landscape)
              zh_Hans: 1792x1024 (Landscape)
            value: 1792x1024
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: select
        - auto_generate: null
          default: doubao-seedream-3-0-t2i-250415
          form: form
          human_description:
            en_US: Model version to use for image generation.
            ja_JP: Model version to use for image generation.
            pt_BR: Model version to use for image generation.
            zh_Hans: Model version to use for image generation.
          label:
            en_US: Model Version
            ja_JP: Model Version
            pt_BR: Model Version
            zh_Hans: Model Version
          llm_description: ''
          max: null
          min: null
          name: model
          options:
          - icon: ''
            label:
              en_US: Doubao Seedream 3.0
              ja_JP: Doubao Seedream 3.0
              pt_BR: Doubao Seedream 3.0
              zh_Hans: Doubao Seedream 3.0
            value: doubao-seedream-3-0-t2i-250415
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: select
        params:
          model: ''
          prompt: ''
          size: ''
        provider_id: allenwriter/doubao_image/doubao
        provider_name: allenwriter/doubao_image/doubao
        provider_type: builtin
        selected: false
        title: Text to Image
        tool_configurations:
          model:
            type: constant
            value: doubao-seedream-3-0-t2i-250415
          size:
            type: constant
            value: 1024x1024
        tool_description: Generate images with Doubao (豆包) AI.
        tool_label: Text to Image
        tool_name: text2image
        tool_node_version: '2'
        tool_parameters:
          model:
            type: constant
            value: doubao-seedream-3-0-t2i-250415
          prompt:
            type: mixed
            value: '{{#17606223903400.text#}}'
          size:
            type: mixed
            value: '{{#code_input_validation.config.image_size#}}'
        type: tool
      height: 113
      id: '1760602895868'
      parentId: '1760602669786'
      position:
        x: 506
        y: 126
      positionAbsolute:
        x: 2348
        y: 549
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
      zIndex: 1002
    - data:
        code: "from typing import Any, Dict, Tuple\nimport ssl, urllib.request, urllib.error,\
          \ json, uuid, mimetypes\nimport logging\n\nDEF_PREFIX = 'capcut/image'\n\
          DEFAULT_REFERER = 'http://8.148.70.18:8080'\nDEFAULT_UA = 'Mozilla/5.0 (Windows\
          \ NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0\
          \ Safari/537.36'\n\ndef _pick_file(files: Any) -> Tuple[str, str, str]:\n\
          \    \"\"\"Return (url, filename, content_type) if possible.\"\"\"\n   \
          \ url = ''\n    filename = 'upload.bin'\n    content_type = ''\n    if isinstance(files,\
          \ dict) and isinstance(files.get('files'), list):\n        files = files['files']\n\
          \    if isinstance(files, list) and files:\n        f = files[0] if isinstance(files[0],\
          \ dict) else None\n        if isinstance(f, dict):\n            # 图片文件：查找url字段（doubao图片生成返回格式）\n\
          \            url = (f.get('url') or f.get('remote_url') or f.get('signed_url')\
          \ or f.get('file_url') or '').strip()\n            name = f.get('filename')\
          \ or f.get('name') or ''\n            ext = f.get('extension') or ''\n \
          \           mt = f.get('mime_type') or ''\n            if name:\n      \
          \          filename = name\n            elif ext:\n                filename\
          \ = 'upload' + (ext if ext.startswith('.') else ('.' + ext))\n         \
          \   if isinstance(mt, str) and mt.strip():\n                content_type\
          \ = mt.strip()\n            elif isinstance(filename, str):\n          \
          \      guessed = mimetypes.guess_type(filename)[0]\n                if guessed:\n\
          \                    content_type = guessed\n    return url, filename, content_type\n\
          \ndef _http_json(api_base_url: str, path: str, payload: Dict[str, Any])\
          \ -> Dict[str, Any]:\n    req = urllib.request.Request(\n        url=f\"\
          {api_base_url.rstrip('/')}/{path.lstrip('/')}\",\n        data=json.dumps(payload).encode('utf-8'),\n\
          \        headers={'Content-Type': 'application/json'},\n        method='POST',\n\
          \    )\n    ctx = ssl.create_default_context()\n    with urllib.request.urlopen(req,\
          \ timeout=30, context=ctx) as resp:\n        return json.loads(resp.read().decode('utf-8'))\n\
          \ndef _http_multipart(api_base_url: str, filename: str, content: bytes,\
          \ content_type: str) -> Dict[str, Any]:\n    boundary = '----DifyBoundary'\
          \ + uuid.uuid4().hex\n    ct = content_type or 'application/octet-stream'\n\
          \    parts = []\n    parts.append(f\"--{boundary}\\r\\nContent-Disposition:\
          \ form-data; name=\\\"prefix\\\"\\r\\n\\r\\n{DEF_PREFIX}\\r\\n\")\n    header\
          \ = (\n        f\"--{boundary}\\r\\n\"\n        f\"Content-Disposition:\
          \ form-data; name=\\\"file\\\"; filename=\\\"{filename}\\\"\\r\\n\"\n  \
          \      f\"Content-Type: {ct}\\r\\n\\r\\n\"\n    ).encode('utf-8')\n    tail\
          \ = f\"\\r\\n--{boundary}--\\r\\n\".encode('utf-8')\n    body = b''.join([p.encode('utf-8')\
          \ for p in parts]) + header + content + tail\n    req = urllib.request.Request(\n\
          \        url=f\"{api_base_url.rstrip('/')}/upload_to_oss\",\n        data=body,\n\
          \        headers={'Content-Type': f'multipart/form-data; boundary={boundary}'},\n\
          \        method='POST',\n    )\n    ctx = ssl.create_default_context()\n\
          \    with urllib.request.urlopen(req, timeout=60, context=ctx) as resp:\n\
          \        return json.loads(resp.read().decode('utf-8'))\n\ndef _try_upload(api_base_url:\
          \ str, file_url: str, filename: str, content_type: str) -> str:\n    ctx\
          \ = ssl.create_default_context()\n    req = urllib.request.Request(file_url,\
          \ method='GET', headers={'Referer': DEFAULT_REFERER, 'User-Agent': DEFAULT_UA})\n\
          \    try:\n        with urllib.request.urlopen(req, timeout=60, context=ctx)\
          \ as r:\n            data = r.read()\n            ct = content_type or r.headers.get('Content-Type',\
          \ '')\n        out = _http_multipart(api_base_url, filename, data, ct or\
          \ content_type)\n        return (out.get('oss_url') or '').strip()\n   \
          \ except Exception as e:\n        logging.warning(f\"Multipart upload failed:\
          \ {str(e)}\")\n        return ''\n\ndef _try_mirror(api_base_url: str, file_url:\
          \ str) -> str:\n    try:\n        out = _http_json(api_base_url, 'mirror_to_oss',\
          \ {'url': file_url, 'prefix': DEF_PREFIX})\n        return (out.get('oss_url')\
          \ or '').strip()\n    except Exception as e:\n        logging.warning(f\"\
          Mirror upload failed: {str(e)}\")\n        return ''\n\ndef main(files:\
          \ Any, api_base_url: str) -> Dict[str, Any]:\n    \"\"\"将豆包生成的音频上传到OSS，获取持久化的公网访问URL\"\
          \"\"\n    try:\n        url, filename, content_type = _pick_file(files)\n\
          \        \n        if not isinstance(api_base_url, str) or not api_base_url.strip():\n\
          \            logging.warning(\"API base URL未配置，返回原始URL\")\n            return\
          \ {\n                'oss_url': url or '',\n                'upload_success':\
          \ bool(url),\n                'error': 'API base URL未配置' if not url else\
          \ ''\n            }\n        \n        if not url:\n            logging.error(\"\
          未找到有效的音频URL\")\n            return {\n                'oss_url': '',\n \
          \               'upload_success': False,\n                'error': '未找到有效的音频URL'\n\
          \            }\n        \n        logging.info(f\"开始上传音频到OSS: {filename},\
          \ 原始URL: {url[:100]}...\")\n        logging.info(f\"使用OSS服务地址: {api_base_url}\"\
          )\n        \n        # 1) 优先使用直接上传 (multipart)\n        oss_url = _try_upload(api_base_url,\
          \ url, filename, content_type)\n        if oss_url:\n            logging.info(f\"\
          Multipart上传成功: {oss_url}\")\n            return {\n                'oss_url':\
          \ oss_url,\n                'upload_success': True,\n                'error':\
          \ ''\n            }\n        \n        # 2) 降级为URL镜像上传\n        logging.info(\"\
          Multipart上传失败，尝试URL镜像上传\")\n        oss_url = _try_mirror(api_base_url,\
          \ url)\n        if oss_url:\n            logging.info(f\"URL镜像上传成功: {oss_url}\"\
          )\n            return {\n                'oss_url': oss_url,\n         \
          \       'upload_success': True,\n                'error': ''\n         \
          \   }\n        \n        # 3) 检查原始URL是否可访问\n        logging.info(\"OSS上传失败，检查原始URL可访问性\"\
          )\n        try:\n            req = urllib.request.Request(url, method='HEAD')\n\
          \            with urllib.request.urlopen(req, timeout=10) as response:\n\
          \                if response.status == 200:\n                    logging.info(f\"\
          原始URL可访问，直接使用: {url}\")\n                    return {\n                \
          \        'oss_url': url,\n                        'upload_success': True,\n\
          \                        'error': 'OSS上传失败，但原始URL可用'\n                 \
          \   }\n        except Exception as e:\n            logging.warning(f\"原始URL检查失败:\
          \ {str(e)}\")\n        \n        # 4) 所有方式都失败，但仍返回原始URL作为降级\n        logging.warning(\"\
          所有上传方式都失败，返回原始URL作为降级方案\")\n        return {\n            'oss_url': url,\n\
          \            'upload_success': True,\n            'error': 'OSS上传失败，使用原始URL'\n\
          \        }\n        \n    except Exception as e:\n        error_msg = f\"\
          OSS上传过程中发生异常: {str(e)}\"\n        logging.error(error_msg)\n        try:\n\
          \            url, _, _ = _pick_file(files)\n            if url:\n      \
          \          return {\n                    'oss_url': url,\n             \
          \       'upload_success': True,\n                    'error': f'OSS上传异常，返回原始URL:\
          \ {str(e)}'\n                }\n        except:\n            pass\n    \
          \    return {\n            'oss_url': '',\n            'upload_success':\
          \ False,\n            'error': error_msg\n        }\n"
        code_language: python3
        desc: 将豆包生成的音频上传到OSS，获取持久化的公网访问URL
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        outputs:
          error:
            children: null
            type: string
          oss_url:
            children: null
            type: string
          upload_success:
            children: null
            type: boolean
        selected: false
        title: 上传图片到OSS
        type: code
        variables:
        - value_selector:
          - '1760602895868'
          - files
          value_type: array[file]
          variable: files
        - value_selector:
          - env
          - api_base_url
          value_type: string
          variable: api_base_url
      height: 95
      id: '1760999999001'
      parentId: '1760602669786'
      position:
        x: 808
        y: 135
      positionAbsolute:
        x: 2650
        y: 558
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
      zIndex: 1002
    - data:
        code: "def main(image_files: str, srt_item: dict, max_retries: int = 3) ->\
          \ dict:\n    \"\"\"\n    检查生成图像的质量并支持重试机制（增强版）\n    \n    功能说明：\n    1.\
          \ 检查图像URL是否有效\n    2. 验证图像文件是否存在\n    3. 进行基础质量评估\n    4. 返回质量检查结果\n   \
          \ 5. 支持重试计数和错误分类\n    6. 增强错误处理和事务性处理\n    7. 性能监控和资源管理\n    \n    Args:\n\
          \        image_files: OSS上传后的图像URL字符串\n        srt_item: 当前SRT项\n      \
          \  max_retries: 最大重试次数\n        \n    Returns:\n        质量检查结果（增强版）\n  \
          \  \"\"\"\n    import logging\n    import time\n    import uuid\n    from\
          \ enum import Enum\n    \n    class ErrorType(Enum):\n        URL_EMPTY\
          \ = \"URL_EMPTY\"\n        URL_INVALID = \"URL_INVALID\"\n        QUALITY_LOW\
          \ = \"QUALITY_LOW\"\n        NETWORK_ERROR = \"NETWORK_ERROR\"\n       \
          \ TIMEOUT_ERROR = \"TIMEOUT_ERROR\"\n        VALIDATION_ERROR = \"VALIDATION_ERROR\"\
          \n        SYSTEM_ERROR = \"SYSTEM_ERROR\"\n    \n    def classify_error(error_msg:\
          \ str, context: dict = None) -> ErrorType:\n        \"\"\"错误分类器\"\"\"\n\
          \        error_lower = error_msg.lower()\n        if \"url为空\" in error_lower\
          \ or \"empty\" in error_lower:\n            return ErrorType.URL_EMPTY\n\
          \        elif \"url格式\" in error_lower or \"invalid\" in error_lower:\n\
          \            return ErrorType.URL_INVALID\n        elif \"质量\" in error_lower\
          \ or \"quality\" in error_lower:\n            return ErrorType.QUALITY_LOW\n\
          \        elif \"网络\" in error_lower or \"network\" in error_lower:\n   \
          \         return ErrorType.NETWORK_ERROR\n        elif \"超时\" in error_lower\
          \ or \"timeout\" in error_lower:\n            return ErrorType.TIMEOUT_ERROR\n\
          \        elif \"验证\" in error_lower or \"validation\" in error_lower:\n\
          \            return ErrorType.VALIDATION_ERROR\n        else:\n        \
          \    return ErrorType.SYSTEM_ERROR\n    \n    def handle_error(error_type:\
          \ ErrorType, error_msg: str, context: dict) -> dict:\n        \"\"\"统一错误处理器\"\
          \"\"\n        recovery_suggestions = {\n            ErrorType.URL_EMPTY:\
          \ \"检查图像生成流程，确保URL正确返回\",\n            ErrorType.URL_INVALID: \"验证URL格式，检查协议和域名\"\
          ,\n            ErrorType.QUALITY_LOW: \"调整生成参数或重新生成\",\n            ErrorType.NETWORK_ERROR:\
          \ \"检查网络连接，稍后重试\",\n            ErrorType.TIMEOUT_ERROR: \"增加超时时间或检查服务状态\"\
          ,\n            ErrorType.VALIDATION_ERROR: \"检查输入参数格式和范围\",\n          \
          \  ErrorType.SYSTEM_ERROR: \"联系技术支持\"\n        }\n        \n        return\
          \ {\n            \"error_type\": error_type.value,\n            \"error_message\"\
          : error_msg,\n            \"recovery_suggestion\": recovery_suggestions.get(error_type,\
          \ \"未知错误类型\"),\n            \"context\": context,\n            \"timestamp\"\
          : time.time(),\n            \"error\": \"\",\n            \"error_details\"\
          : {},\n            \"image_url\": \"\",\n            \"performance_info\"\
          : {},\n            \"quality_pass\": False,\n            \"quality_score\"\
          : 0,\n            \"retry_count\": 0,\n            \"should_retry\": False,\n\
          \            \"srt_item\": {},\n            \"transaction_id\": \"\",\n\
          \        }\n    \n    # 生成事务ID\n    transaction_id = str(uuid.uuid4())[:8]\n\
          \    start_time = time.time()\n    \n    try:\n        # 获取当前重试次数\n    \
          \    current_retry = srt_item.get(\"retry_count\", 0)\n        \n      \
          \  # 输入验证\n        if not isinstance(srt_item, dict):\n            error_msg\
          \ = \"SRT项必须是字典类型\"\n            error_info = handle_error(ErrorType.VALIDATION_ERROR,\
          \ error_msg, {\"srt_item\": str(srt_item)})\n            return {\n    \
          \            \"quality_pass\": False,\n                \"quality_score\"\
          : 0.0,\n                \"error\": error_msg,\n                \"error_type\"\
          : \"\",\n                \"error_details\": error_info,\n              \
          \  \"transaction_id\": transaction_id,\n                \"performance_info\"\
          : {\"duration\": round(time.time() - start_time, 3)},\n                \"\
          should_retry\": False,\n                \"image_url\": \"\",\n         \
          \       \"retry_count\": 0,\n                \"srt_item\": {},\n       \
          \     }\n        \n        # 检查图像URL\n        if not image_files or not\
          \ isinstance(image_files, str) or not image_files.strip():\n           \
          \ error_msg = f\"图像URL为空 (重试 {current_retry}/{max_retries})\"\n        \
          \    error_info = handle_error(ErrorType.URL_EMPTY, error_msg, {\"retry\"\
          : current_retry})\n            should_retry = current_retry < max_retries\n\
          \            return {\n                \"quality_pass\": False,\n      \
          \          \"quality_score\": 0.3,\n                \"error\": error_msg,\n\
          \                \"error_type\": \"\",\n                \"error_details\"\
          : error_info,\n                \"image_url\": \"\",\n                \"\
          srt_item\": {**srt_item, \"retry_count\": current_retry + 1},\n        \
          \        \"should_retry\": should_retry,\n                \"retry_count\"\
          : current_retry,\n                \"transaction_id\": transaction_id,\n\
          \                \"performance_info\": {\"duration\": round(time.time()\
          \ - start_time, 3)},\n            }\n        \n        # 清理URL\n       \
          \ image_url = image_files.strip()\n        \n        # 记录接收到的URL用于调试\n \
          \       logging.info(f\"[{transaction_id}] 接收到的OSS图像URL: {image_url}\")\n\
          \        \n        # 检查URL格式\n        if not image_url.startswith(('http://',\
          \ 'https://')):\n            error_msg = f\"图像URL格式无效: '{image_url}' (重试\
          \ {current_retry}/{max_retries})\"\n            error_info = handle_error(ErrorType.URL_INVALID,\
          \ error_msg, {\"url\": image_url, \"retry\": current_retry})\n         \
          \   should_retry = current_retry < max_retries\n            logging.warning(f\"\
          [{transaction_id}] 图像URL格式无效: '{image_url}'\")\n            return {\n \
          \               \"quality_pass\": False,\n                \"quality_score\"\
          : 0.15,\n                \"error\": error_msg,\n                \"error_type\"\
          : \"\",\n                \"error_details\": error_info,\n              \
          \  \"image_url\": image_url,\n                \"srt_item\": {**srt_item,\
          \ \"retry_count\": current_retry + 1},\n                \"should_retry\"\
          : should_retry,\n                \"retry_count\": current_retry,\n     \
          \           \"transaction_id\": transaction_id,\n                \"performance_info\"\
          : {\"duration\": round(time.time() - start_time, 3)},\n            }\n \
          \       \n        # 验证URL的可访问性（简化检查）\n        url_quality_bonus = 0.0\n\
          \        \n        # 检查是否为OSS URL（持久化存储）\n        if 'oss' in image_url.lower()\
          \ or 'aliyuncs.com' in image_url.lower():\n            logging.info(f\"\
          [{transaction_id}] 检测到OSS持久化URL: {image_url[:50]}...\")\n            url_quality_bonus\
          \ = 0.15  # OSS URL质量较高\n        elif '?' in image_url and ('timestamp'\
          \ in image_url or 'expires' in image_url):\n            logging.info(f\"\
          [{transaction_id}] 检测到带签名的临时URL: {image_url[:50]}...\")\n            url_quality_bonus\
          \ = 0.1  # 临时URL质量中等\n        \n        # 基础质量评分（简化实现）\n        base_quality_score\
          \ = 0.85  # 默认质量分数\n        \n        # 应用URL质量加分\n        quality_score\
          \ = min(1.0, base_quality_score + url_quality_bonus)\n        \n       \
          \ # 质量阈值\n        quality_threshold = 0.7\n        \n        # 记录质量检查结果\n\
          \        logging.info(f\"[{transaction_id}] 质量检查完成 - 分数: {quality_score:.2f},\
          \ 阈值: {quality_threshold}, URL: {image_url[:50]}...\")\n        \n     \
          \   # 如果质量不达标，判断是否需要重试\n        if quality_score < quality_threshold:\n\
          \            error_msg = f\"图像质量不达标 (分数: {quality_score:.2f}, 重试 {current_retry}/{max_retries})\"\
          \n            error_info = handle_error(ErrorType.QUALITY_LOW, error_msg,\
          \ {\"score\": quality_score, \"threshold\": quality_threshold, \"retry\"\
          : current_retry})\n            should_retry = current_retry < max_retries\n\
          \            return {\n                \"quality_pass\": False,\n      \
          \          \"quality_score\": quality_score,\n                \"error\"\
          : error_msg,\n                \"error_type\": \"\",\n                \"\
          error_details\": error_info,\n                \"image_url\": image_url,\n\
          \                \"srt_item\": {**srt_item, \"retry_count\": current_retry\
          \ + 1},\n                \"should_retry\": should_retry,\n             \
          \   \"retry_count\": current_retry,\n                \"transaction_id\"\
          : transaction_id,\n                \"performance_info\": {\"duration\":\
          \ round(time.time() - start_time, 3)},\n            }\n        \n      \
          \  # 质量检查通过\n        duration = round(time.time() - start_time, 3)\n   \
          \     logging.info(f\"[{transaction_id}] 质量检查通过，耗时: {duration:.2f}s\")\n\
          \        \n        return {\n            \"quality_pass\": True,\n     \
          \       \"quality_score\": quality_score,\n            \"error\": \"\",\n\
          \            \"error_type\": \"\",\n            \"error_details\": None,\n\
          \            \"image_url\": image_url,  # 使用OSS URL作为最终图像URL,\n        \
          \    \"srt_item\": srt_item,\n            \"should_retry\": False,\n   \
          \         \"retry_count\": current_retry,\n            \"transaction_id\"\
          : transaction_id,\n            \"performance_info\": {\n               \
          \ \"duration\": duration,\n                \"quality_bonus\": url_quality_bonus,\n\
          \                \"threshold_used\": quality_threshold,\n            }\n\
          \        }\n        \n    except Exception as e:\n        # 系统级错误处理\n  \
          \      error_msg = f\"质量检查过程中发生系统错误: {str(e)}\"\n        error_info = handle_error(ErrorType.SYSTEM_ERROR,\
          \ error_msg, {\"exception\": str(e), \"transaction_id\": transaction_id})\n\
          \        logging.error(f\"[{transaction_id}] {error_msg}\")\n        \n\
          \        return {\n            \"quality_pass\": False,\n            \"\
          quality_score\": 0.0,\n            \"error\": error_msg,\n            \"\
          error_type\": \"\",\n            \"error_details\": error_info,\n      \
          \      \"image_url\": image_files if isinstance(image_files, str) else \"\
          \",\n            \"srt_item\": srt_item if isinstance(srt_item, dict) else\
          \ {},\n            \"should_retry\": False,\n            \"retry_count\"\
          : srt_item.get(\"retry_count\", 0) if isinstance(srt_item, dict) else 0,\n\
          \            \"transaction_id\": transaction_id,\n            \"performance_info\"\
          : {\"duration\": time.time() - start_time},\n        }"
        code_language: python3
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        outputs:
          error:
            children: null
            type: string
          error_details:
            children: null
            type: object
          error_type:
            children: null
            type: string
          image_url:
            children: null
            type: string
          performance_info:
            children: null
            type: object
          quality_pass:
            children: null
            type: boolean
          quality_score:
            children: null
            type: number
          retry_count:
            children: null
            type: number
          should_retry:
            children: null
            type: boolean
          srt_item:
            children: null
            type: object
          transaction_id:
            children: null
            type: string
        selected: false
        title: 质量检查
        type: code
        variables:
        - value_selector:
          - '1760999999001'
          - oss_url
          value_type: string
          variable: image_files
        - value_selector:
          - '1760602669786'
          - item
          value_type: object
          variable: srt_item
        - value_selector:
          - code_input_validation
          - config
          - max_retries
          value_type: number
          variable: max_retries
      height: 51
      id: '1760602942927'
      parentId: '1760602669786'
      position:
        x: 1110
        y: 157
      positionAbsolute:
        x: 2952
        y: 580
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
      zIndex: 1002
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: is
            id: 9557a27c-8db7-4b51-9a9d-ffe60f81ec6c
            value: true
            varType: boolean
            variable_selector:
            - '1760602942927'
            - quality_pass
          id: 'true'
          logical_operator: and
        - case_id: retry
          conditions:
          - comparison_operator: is
            id: b47a38ee-9fc1-4d62-8e8f-2a1b5c3d7e9f
            value: true
            varType: boolean
            variable_selector:
            - '1760602942927'
            - should_retry
          id: retry
          logical_operator: and
        - case_id: 328e3dc0-d189-4b54-b120-17bd316652e1
          conditions:
          - comparison_operator: is
            id: a37927dd-8ed0-4251-bfdf-7d87c2a0522e
            value: false
            varType: boolean
            variable_selector:
            - '1760602942927'
            - quality_pass
          - comparison_operator: is
            id: c58f49dd-7bc2-4e73-9d4a-8f6e1a2b3c4d
            value: false
            varType: boolean
            variable_selector:
            - '1760602942927'
            - should_retry
          id: 328e3dc0-d189-4b54-b120-17bd316652e1
          logical_operator: and
        isInIteration: true
        isInLoop: false
        iteration_id: '1760602669786'
        selected: false
        title: 条件分支 2
        type: if-else
      height: 245
      id: '1760603125046'
      parentId: '1760602669786'
      position:
        x: 1412
        y: 60
      positionAbsolute:
        x: 3254
        y: 483
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        is_team_authorization: true
        iteration_id: '1760602669786'
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: The text prompt used to generate the image. Doubao will generate
              an image based on this prompt.
            ja_JP: The text prompt used to generate the image. Doubao will generate
              an image based on this prompt.
            pt_BR: The text prompt used to generate the image. Doubao will generate
              an image based on this prompt.
            zh_Hans: The text prompt used to generate the image. Doubao will generate
              an image based on this prompt.
          label:
            en_US: Prompt
            ja_JP: Prompt
            pt_BR: Prompt
            zh_Hans: Prompt
          llm_description: This prompt text will be used to generate image.
          max: null
          min: null
          name: prompt
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: 1024x1024
          form: form
          human_description:
            en_US: The size of the generated image.
            ja_JP: The size of the generated image.
            pt_BR: The size of the generated image.
            zh_Hans: The size of the generated image.
          label:
            en_US: Image Size
            ja_JP: Image Size
            pt_BR: Image Size
            zh_Hans: Image Size
          llm_description: ''
          max: null
          min: null
          name: size
          options:
          - icon: ''
            label:
              en_US: 1024x1024 (Square)
              ja_JP: 1024x1024 (Square)
              pt_BR: 1024x1024 (Square)
              zh_Hans: 1024x1024 (Square)
            value: 1024x1024
          - icon: ''
            label:
              en_US: 1024x1792 (Portrait)
              ja_JP: 1024x1792 (Portrait)
              pt_BR: 1024x1792 (Portrait)
              zh_Hans: 1024x1792 (Portrait)
            value: 1024x1792
          - icon: ''
            label:
              en_US: 1792x1024 (Landscape)
              ja_JP: 1792x1024 (Landscape)
              pt_BR: 1792x1024 (Landscape)
              zh_Hans: 1792x1024 (Landscape)
            value: 1792x1024
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: select
        - auto_generate: null
          default: doubao-seedream-3-0-t2i-250415
          form: form
          human_description:
            en_US: Model version to use for image generation.
            ja_JP: Model version to use for image generation.
            pt_BR: Model version to use for image generation.
            zh_Hans: Model version to use for image generation.
          label:
            en_US: Model Version
            ja_JP: Model Version
            pt_BR: Model Version
            zh_Hans: Model Version
          llm_description: ''
          max: null
          min: null
          name: model
          options:
          - icon: ''
            label:
              en_US: Doubao Seedream 3.0
              ja_JP: Doubao Seedream 3.0
              pt_BR: Doubao Seedream 3.0
              zh_Hans: Doubao Seedream 3.0
            value: doubao-seedream-3-0-t2i-250415
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: select
        params:
          model: ''
          prompt: ''
          size: ''
        provider_id: allenwriter/doubao_image/doubao
        provider_name: allenwriter/doubao_image/doubao
        provider_type: builtin
        selected: false
        title: Text to Image
        tool_configurations:
          model:
            type: constant
            value: doubao-seedream-3-0-t2i-250415
          size:
            type: constant
            value: 1024x1024
        tool_description: Generate images with Doubao (豆包) AI.
        tool_label: Text to Image
        tool_name: text2image
        tool_node_version: '2'
        tool_parameters:
          model:
            type: constant
            value: doubao-seedream-3-0-t2i-250415
          prompt:
            type: mixed
            value: '{{#17606223903400.text#}}'
          size:
            type: mixed
            value: '{{#code_input_validation.config.image_size#}}'
        type: tool
      height: 113
      id: '1760603213982'
      parentId: '1760602669786'
      position:
        x: 1714
        y: 212.5
      positionAbsolute:
        x: 3556
        y: 635.5
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
      zIndex: 1002
    - data:
        code: "def main(quality_pass: bool, image_url: str, quality_score: float,\
          \ error: str, srt_item: dict, error_type: str = \"\", should_retry: bool\
          \ = False, retry_count: int = 0, error_details: dict = None, transaction_id:\
          \ str = \"\", performance_info: dict = None) -> dict:\n    \"\"\"\n    收集单个图像生成的结果并显示进度状态（增强版）\n\
          \    \n    功能说明：\n    1. 整理图像生成结果\n    2. 记录成功或失败状态\n    3. 处理重试信息\n   \
          \ 4. 返回标准化的结果对象\n    5. 显示当前处理进度\n    6. 增强错误处理和事务性处理\n    7. 性能监控和资源管理\n\
          \    \n    Args:\n        quality_pass: 质量检查是否通过\n        image_url: 图像URL\n\
          \        quality_score: 质量分数\n        error: 错误信息\n        srt_item: 当前SRT项\n\
          \        error_type: 错误类型\n        should_retry: 是否需要重试\n        retry_count:\
          \ 重试次数\n        error_details: 详细错误信息\n        transaction_id: 事务ID\n  \
          \      performance_info: 性能信息\n        \n    Returns:\n        结果对象，包装在result键中（增强版）\n\
          \    \"\"\"\n    import time\n    import logging\n    import uuid\n    from\
          \ enum import Enum\n    \n    class StatusType(Enum):\n        SUCCESS =\
          \ \"success\"\n        RETRYING = \"retrying\"\n        FAILED = \"failed\"\
          \n        PENDING = \"pending\"\n        PROCESSING = \"processing\"\n \
          \   \n    def calculate_metrics(quality_score: float, retry_count: int,\
          \ performance_info: dict) -> dict:\n        \"\"\"计算性能指标\"\"\"\n       \
          \ base_metrics = {\n            \"quality_score\": quality_score,\n    \
          \        \"retry_count\": retry_count,\n            \"efficiency_score\"\
          : max(0.0, 1.0 - (retry_count * 0.2)),  # 重试次数影响效率\n            \"quality_grade\"\
          : \"A\" if quality_score >= 0.9 else \"B\" if quality_score >= 0.7 else\
          \ \"C\" if quality_score >= 0.5 else \"D\"\n        }\n        \n      \
          \  if performance_info:\n            base_metrics.update({\n           \
          \     \"processing_duration\": performance_info.get(\"duration\", 0),\n\
          \                \"quality_bonus\": performance_info.get(\"quality_bonus\"\
          , 0),\n                \"threshold_used\": performance_info.get(\"threshold_used\"\
          , 0.7)\n            })\n        \n        return base_metrics\n    \n  \
          \  def generate_recovery_plan(error_type: str, retry_count: int, error_details:\
          \ dict) -> dict:\n        \"\"\"生成恢复计划\"\"\"\n        recovery_plans = {\n\
          \            \"URL_EMPTY\": {\n                \"immediate_action\": \"\
          检查图像生成流程\",\n                \"next_steps\": [\"验证API连接\", \"检查参数配置\", \"\
          重新生成\"],\n                \"estimated_time\": \"1-2分钟\"\n            },\n\
          \            \"URL_INVALID\": {\n                \"immediate_action\": \"\
          验证URL格式\",\n                \"next_steps\": [\"检查协议\", \"验证域名\", \"测试连接\"\
          ],\n                \"estimated_time\": \"30秒-1分钟\"\n            },\n  \
          \          \"QUALITY_LOW\": {\n                \"immediate_action\": \"\
          调整生成参数\",\n                \"next_steps\": [\"优化提示词\", \"调整模型参数\", \"重新生成\"\
          ],\n                \"estimated_time\": \"1-3分钟\"\n            }\n     \
          \   }\n        \n        default_plan = {\n            \"immediate_action\"\
          : \"系统诊断\",\n            \"next_steps\": [\"检查日志\", \"联系技术支持\"],\n     \
          \       \"estimated_time\": \"5-10分钟\"\n        }\n        \n        plan\
          \ = recovery_plans.get(error_type, default_plan)\n        plan[\"retry_count\"\
          ] = retry_count\n        plan[\"max_retries_reached\"] = retry_count >=\
          \ 3\n        \n        return plan\n    \n    try:\n        # 生成或使用现有事务ID\n\
          \        if not transaction_id:\n            transaction_id = str(uuid.uuid4())[:8]\n\
          \        \n        start_time = time.time()\n        \n        # 输入验证\n\
          \        if not isinstance(srt_item, dict):\n            logging.error(f\"\
          [{transaction_id}] SRT项必须是字典类型\")\n            return {\n              \
          \  \"result\": {\n                    \"index\": 0,\n                  \
          \  \"status\": StatusType.FAILED.value,\n                    \"error\":\
          \ \"输入验证失败：SRT项格式错误\",\n                    \"transaction_id\": transaction_id,\n\
          \                    \"processing_time\": time.strftime(\"%H:%M:%S\", time.localtime())\n\
          \                }\n            }\n        \n        # 获取当前处理的索引\n     \
          \   current_index = srt_item.get(\"index\", 0)\n        current_text = srt_item.get(\"\
          text\", \"\")\n        \n        # 计算性能指标\n        metrics = calculate_metrics(quality_score,\
          \ retry_count, performance_info)\n        \n        # 生成进度状态信息\n       \
          \ if quality_pass:\n            status_emoji = \"✅\"\n            progress_info\
          \ = f\"{status_emoji} 第 {current_index} 项处理完成\"\n            progress_detail\
          \ = f\"\U0001F3A8 成功生成图像 | 质量分数: {quality_score:.2f} ({metrics['quality_grade']})\
          \ | 效率: {metrics['efficiency_score']:.2f} | 文本: {current_text[:30]}{'...'\
          \ if len(current_text) > 30 else ''}\"\n            final_status = StatusType.SUCCESS.value\n\
          \            recovery_plan = None\n        elif should_retry:\n        \
          \    status_emoji = \"\U0001F504\"\n            progress_info = f\"{status_emoji}\
          \ 第 {current_index} 项需要重试 (第{retry_count}次)\"\n            progress_detail\
          \ = f\"⚠️ 重试中 | 错误类型: {error_type} | 错误: {error} | 文本: {current_text[:30]}{'...'\
          \ if len(current_text) > 30 else ''}\"\n            final_status = StatusType.RETRYING.value\n\
          \            recovery_plan = generate_recovery_plan(error_type, retry_count,\
          \ error_details or {})\n        else:\n            status_emoji = \"❌\"\n\
          \            progress_info = f\"{status_emoji} 第 {current_index} 项处理失败\"\
          \n            progress_detail = f\"\U0001F4A5 最终失败 | 错误类型: {error_type}\
          \ | 错误: {error} | 重试次数: {retry_count} | 文本: {current_text[:30]}{'...' if\
          \ len(current_text) > 30 else ''}\"\n            final_status = StatusType.FAILED.value\n\
          \            recovery_plan = generate_recovery_plan(error_type, retry_count,\
          \ error_details or {})\n        \n        # 记录处理时间戳\n        processing_timestamp\
          \ = time.strftime(\"%H:%M:%S\", time.localtime())\n        processing_duration\
          \ = round(time.time() - start_time, 3)\n        \n        result_obj = {\n\
          \            \"index\": current_index,\n            \"srt_text\": current_text,\n\
          \            \"timestamp\": srt_item.get(\"timestamp\", \"\"),\n       \
          \     \"image_url\": image_url if quality_pass else \"\",\n            \"\
          quality_score\": quality_score,\n            \"status\": final_status,\n\
          \            \"error\": error if not quality_pass else \"\",\n         \
          \   \"error_type\": error_type,\n            \"error_details\": error_details,\n\
          \            \"retry_count\": retry_count,\n            \"should_retry\"\
          : should_retry,\n            \"progress_info\": progress_info,\n       \
          \     \"progress_detail\": progress_detail,\n            \"processing_time\"\
          : processing_timestamp,\n            \"transaction_id\": transaction_id,\n\
          \            \"metrics\": metrics,\n            \"recovery_plan\": recovery_plan,\n\
          \            \"performance_info\": {\n                \"collection_duration\"\
          : processing_duration,\n                \"total_processing_time\": performance_info.get(\"\
          duration\", 0) if performance_info else 0,\n                \"efficiency_rating\"\
          : metrics['efficiency_score']\n            }\n        }\n        \n    \
          \    # 输出进度日志\n        logging.info(f\"[{transaction_id}] {progress_info}\
          \ - {progress_detail}\")\n        \n        if recovery_plan:\n        \
          \    logging.info(f\"[{transaction_id}] 恢复计划: {recovery_plan['immediate_action']}\
          \ | 预计时间: {recovery_plan['estimated_time']}\")\n        \n        return\
          \ {\"result\": result_obj}\n        \n    except Exception as e:\n     \
          \   # 系统级错误处理\n        error_msg = f\"收集结果过程中发生系统错误: {str(e)}\"\n      \
          \  logging.error(f\"[{transaction_id}] {error_msg}\")\n        \n      \
          \  return {\n            \"result\": {\n                \"index\": srt_item.get(\"\
          index\", 0) if isinstance(srt_item, dict) else 0,\n                \"status\"\
          : StatusType.FAILED.value,\n                \"error\": error_msg,\n    \
          \            \"error_type\": \"SYSTEM_ERROR\",\n                \"transaction_id\"\
          : transaction_id,\n                \"processing_time\": time.strftime(\"\
          %H:%M:%S\", time.localtime()),\n                \"performance_info\": {\"\
          collection_duration\": round(time.time() - start_time if 'start_time' in\
          \ locals() else 0, 3)}\n            }\n        }\n"
        code_language: python3
        desc: 收集单个图像生成的结果
        isInIteration: true
        outputs:
          result:
            children:
              error:
                type: string
              error_details:
                type: object
              error_type:
                type: string
              image_url:
                type: string
              index:
                type: number
              metrics:
                type: object
              performance_info:
                type: object
              processing_time:
                type: string
              progress_detail:
                type: string
              progress_info:
                type: string
              quality_score:
                type: number
              recovery_plan:
                type: object
              retry_count:
                type: number
              should_retry:
                type: boolean
              srt_text:
                type: string
              status:
                type: string
              timestamp:
                type: string
              transaction_id:
                type: string
            type: object
        selected: false
        title: 收集结果
        type: code
        variables:
        - value_selector:
          - '1760602942927'
          - quality_pass
          value_type: boolean
          variable: quality_pass
        - value_selector:
          - '1760602942927'
          - image_url
          value_type: string
          variable: image_url
        - value_selector:
          - '1760602942927'
          - quality_score
          value_type: number
          variable: quality_score
        - value_selector:
          - '1760602942927'
          - error
          value_type: string
          variable: error
        - value_selector:
          - '1760602942927'
          - srt_item
          value_type: object
          variable: srt_item
        - value_selector:
          - '1760602942927'
          - error_type
          value_type: string
          variable: error_type
        - value_selector:
          - '1760602942927'
          - should_retry
          value_type: boolean
          variable: should_retry
        - value_selector:
          - '1760602942927'
          - retry_count
          value_type: number
          variable: retry_count
      height: 79
      id: '17606215510130'
      parentId: '1760602669786'
      position:
        x: 2016
        y: 143
      positionAbsolute:
        x: 3858
        y: 566
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        context:
          enabled: false
          variable_selector: []
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: Doubao-pro-128k
          provider: langgenius/volcengine_maas/volcengine_maas
        prompt_template:
        - id: c2a261e2-2f32-48e0-832c-759d2e8574d0
          role: system
          text: 你是专业短视频编导。根据主题生成用于配字幕的简洁脚本：\n1) 标题（<=20字）\n2) 开场钩子（1句）\n3) 正文（2-5句）\n4)
            收尾（1句）\n用口语化中文，去除多余说明，仅输出文本内容。
        - id: 05e32605-7023-478c-9fb7-6a77b2141d31
          role: user
          text: 主题：{{#start_1.prompt#}}\n时长（秒）：{{#start_1.duration#}}
        selected: false
        title: 生成短视频脚本
        type: llm
        vision:
          enabled: false
      height: 87
      id: '1760621763757'
      position:
        x: 332
        y: 423
      positionAbsolute:
        x: 332
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        context:
          enabled: false
          variable_selector: []
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: Doubao-pro-128k
          provider: langgenius/volcengine_maas/volcengine_maas
        prompt_template:
        - id: 642ca730-6e40-4f9a-80e5-51b9a73367a7
          role: system
          text: 把下面脚本转为标准SRT字幕内容。总时长≈{{#start_1.duration#}}秒，平均分配。输出严格为SRT文本文本，不要JSON或额外解释。
        - id: ffd1071d-58d5-4c1a-89cc-2761c848b6cf
          role: user
          text: '{{#1760621763757.text#}}'
        selected: false
        title: 脚本转SRT
        type: llm
        vision:
          enabled: false
      height: 87
      id: '1760621945531'
      position:
        x: 634
        y: 423
      positionAbsolute:
        x: 634
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        code: "def main(srt_text: str) -> dict:\n    \"\"\"\n    将SRT文本转换为对象数组格式\n\
          \    \n    功能说明：\n    1. 过滤掉思考标签和代码块标记\n    2. 提取纯净的SRT格式文本\n    3. 解析SRT条目为结构化数组\n\
          \    4. 避免重复数据\n    \n    Args:\n        srt_text: 从脚本转SRT节点输出的文本（可能包含思考过程）\n\
          \        \n    Returns:\n        dict: 包含转换后的对象数组，每个对象包含序号、时间戳和文本内容\n  \
          \  \"\"\"\n    import re\n    \n    # 如果输入为空，返回空数组\n    if not srt_text\
          \ or not srt_text.strip():\n        return {\"srt_array\": []}\n    \n \
          \   # 预处理：移除思考标签和代码块标记\n    cleaned_text = srt_text\n    \n    # 移除 <think>...</think>\
          \ 标签及其内容\n    cleaned_text = re.sub(r'<think>.*?</think>', '', cleaned_text,\
          \ flags=re.DOTALL)\n    \n    # 移除代码块标记（```开头和结尾）\n    cleaned_text = re.sub(r'^```[\\\
          w]*\\n?', '', cleaned_text, flags=re.MULTILINE)\n    cleaned_text = re.sub(r'\\\
          n?```$', '', cleaned_text, flags=re.MULTILINE)\n    cleaned_text = re.sub(r'```$',\
          \ '', cleaned_text)\n    \n    # 清理多余的空白字符\n    cleaned_text = cleaned_text.strip()\n\
          \    \n    # 如果清理后为空，返回空数组\n    if not cleaned_text:\n        return {\"\
          srt_array\": []}\n    \n    # 按行分割SRT文本\n    lines = cleaned_text.split('\\\
          n')\n    \n    srt_array = []\n    current_subtitle = {}\n    \n    i =\
          \ 0\n    while i < len(lines):\n        line = lines[i].strip()\n      \
          \  \n        # 跳过空行\n        if not line:\n            i += 1\n        \
          \    continue\n        \n        # 检查是否为序号行（纯数字）\n        if line.isdigit():\n\
          \            # 开始新的字幕条目\n            current_subtitle = {\n            \
          \    \"index\": int(line),\n                \"timestamp\": \"\",\n     \
          \           \"text\": \"\"\n            }\n            i += 1\n        \
          \    \n            # 获取时间戳行\n            if i < len(lines) and '-->' in\
          \ lines[i]:\n                current_subtitle[\"timestamp\"] = lines[i].strip()\n\
          \                i += 1\n                \n                # 获取文本内容（可能多行）\n\
          \                text_lines = []\n                while i < len(lines) and\
          \ lines[i].strip() and not lines[i].strip().isdigit():\n               \
          \     # 清理文本行，移除可能的代码块标记\n                    text_line = lines[i].strip()\n\
          \                    text_line = re.sub(r'^```[\\w]*$', '', text_line)\n\
          \                    text_line = re.sub(r'^```$', '', text_line)\n     \
          \               if text_line:  # 只添加非空行\n                        text_lines.append(text_line)\n\
          \                    i += 1\n                \n                current_subtitle[\"\
          text\"] = \" \".join(text_lines)\n                \n                # 添加到数组中（确保不重复）\n\
          \                if current_subtitle[\"text\"] and current_subtitle not\
          \ in srt_array:\n                    srt_array.append(current_subtitle.copy())\n\
          \        else:\n            i += 1\n    \n    return {\"srt_array\": srt_array}"
        code_language: python3
        outputs:
          srt_array:
            children: null
            type: array[object]
        selected: false
        title: SRT转数组
        type: code
        variables:
        - value_selector:
          - '1760621945531'
          - text
          value_type: string
          variable: srt_text
      height: 51
      id: '1760622014513'
      position:
        x: 936
        y: 423
      positionAbsolute:
        x: 936
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        context:
          enabled: false
          variable_selector: []
        isInIteration: true
        memory:
          query_prompt_template: ''
          role_prefix:
            assistant: ''
            user: ''
          window:
            enabled: false
            size: 10
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: Doubao-pro-128k
          provider: langgenius/volcengine_maas/volcengine_maas
        prompt_template:
        - id: sys-enhance
          role: system
          text: '你是专业的AI图像提示词优化专家。根据用户提供的简短文本，生成详细的图像生成提示词。


            优化规则：

            1. 保留原文本的核心内容和意图

            2. 添加视觉细节（光线、色彩、构图等）

            3. 根据风格添加相应的艺术描述词

            4. 确保提示词清晰、具体、富有表现力

            5. 输出纯文本提示词，不要包含任何说明或格式标记


            风格说明：

            - realistic: 添加"高清摄影、真实感、自然光线、细节丰富"

            - anime: 添加"动漫风格、日式插画、鲜艳色彩、二次元"

            - oil_painting: 添加"油画风格、古典艺术、厚重笔触、艺术感"

            - watercolor: 添加"水彩画、柔和色调、渐变效果、清新淡雅"

            - sketch: 添加"素描风格、黑白线条、手绘感、艺术创作"

            '
        - id: user-enhance
          role: user
          text: '原始文本：{{#1760602669786.item.text#}}

            图像风格：{{#code_input_validation.config.image_style#}}


            请优化这个提示词，使其更适合生成{{#code_input_validation.config.image_style#}}风格的图像。

            '
        selected: false
        title: 提示词优化
        type: llm
        vision:
          configs:
            detail: high
          enabled: false
      height: 87
      id: '17606223903400'
      parentId: '1760602669786'
      position:
        x: 204
        y: 139
      positionAbsolute:
        x: 2046
        y: 562
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        authorization:
          config: null
          type: no-auth
        body:
          data:
          - id: key-value-212
            key: ''
            type: text
            value: "{\n  \"width\": {{#start_1.width#}},\n  \"height\": {{#start_1.height#}}\n\
              }"
          type: raw-text
        headers: Content-Type:application/json
        method: post
        params: ''
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 100
        selected: false
        ssl_verify: true
        timeout:
          max_connect_timeout: 0
          max_read_timeout: 0
          max_write_timeout: 0
        title: 创建草稿
        type: http-request
        url: '{{#env.api_base_url#}}/create_draft'
        variables: []
      height: 141
      id: '1761041582774'
      position:
        x: 4824
        y: 423
      positionAbsolute:
        x: 4824
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        code: "import json\nimport re\n\ndef main(http_response_body: str) -> dict:\n\
          \    \"\"\"\n    从HTTP响应中解析并规范化draft_id\n    \n    Args:\n        http_response_body:\
          \ HTTP请求返回的JSON字符串\n        \n    Returns:\n        dict: 包含规范化后draft_id的字典\n\
          \    \"\"\"\n    try:\n        # 解析JSON响应\n        response_data = json.loads(http_response_body)\n\
          \        \n        # 提取draft_id\n        draft_id = response_data.get('output',\
          \ {}).get('draft_id', '')\n        \n        # 规范化处理：去除换行、首尾空白，确保输出一行字符串\n\
          \        if draft_id:\n            draft_id = str(draft_id)\n          \
          \  # 去除所有换行符（\\n, \\r）\n            draft_id = re.sub(r'[\\n\\r]+', '',\
          \ draft_id)\n            # 去除首尾空白\n            draft_id = draft_id.strip()\n\
          \        else:\n            draft_id = ''\n            \n        return\
          \ {\n            'draft_id': draft_id\n        }\n        \n    except (json.JSONDecodeError,\
          \ AttributeError, KeyError) as e:\n        # 如果解析失败，返回空字符串\n        return\
          \ {\n            'draft_id': ''\n        }"
        code_language: python3
        outputs:
          draft_id:
            children: null
            type: string
        selected: false
        title: 解析并规范化草稿ID
        type: code
        variables:
        - value_selector:
          - '1761041582774'
          - body
          variable: http_response_body
      height: 51
      id: '1761042052305'
      position:
        x: 5126
        y: 423
      positionAbsolute:
        x: 5126
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        authorization:
          config: null
          type: no-auth
        body:
          data:
          - id: key-value-435
            key: ''
            type: text
            value: "{\n  \"audio_url\": \"{{#start_1.bgm_url#}}\",\n  \"draft_id\"\
              : \"{{#1761042052305.draft_id#}}\",\n  \"start\": 0,\n  \"end\": {{#start_1.duration#}},\n\
              \  \"volume\": 0.7,\n  \"track_name\": \"audio_main\",\n  \"material_type\"\
              : \"audio\",\n  \"type\": \"audio\",\n  \"materialType\": \"audio\"\n\
              }"
          type: raw-text
        headers: Content-Type:application/json
        method: post
        params: ''
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 100
        selected: false
        ssl_verify: true
        timeout:
          max_connect_timeout: 0
          max_read_timeout: 0
          max_write_timeout: 0
        title: 加背景音乐添
        type: http-request
        url: '{{#env.api_base_url#}}/add_audio'
        variables: []
      height: 125
      id: '17610437227200'
      position:
        x: 6334
        y: 423
      positionAbsolute:
        x: 6334
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        authorization:
          config: null
          type: no-auth
        body:
          data:
          - id: key-value-435
            key: ''
            type: text
            value: "{\n  \"draft_id\": \"{{#1761042052305.draft_id#}}\"\n}"
          type: raw-text
        headers: Content-Type:application/json
        method: post
        params: ''
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 100
        selected: false
        ssl_verify: true
        timeout:
          max_connect_timeout: 0
          max_read_timeout: 0
          max_write_timeout: 0
        title: 保存草稿
        type: http-request
        url: '{{#env.api_base_url#}}/save_draft'
        variables: []
      height: 125
      id: '17610437271090'
      position:
        x: 6636
        y: 423
      positionAbsolute:
        x: 6636
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        error_handle_mode: terminated
        height: 216
        is_parallel: false
        iterator_input_type: array[object]
        iterator_selector:
        - code_input_validation
        - srt_array
        output_selector:
        - '1761044999999'
        - audio_info
        output_type: array[object]
        parallel_nums: 10
        selected: false
        start_node_id: 1761044157730start
        title: 语音合成
        type: iteration
        width: 1220
      height: 216
      id: '1761044157730'
      position:
        x: 2391
        y: 909
      positionAbsolute:
        x: 2391
        y: 909
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 1220
      zIndex: 1
    - data:
        desc: ''
        isInIteration: true
        selected: false
        title: ''
        type: iteration-start
      draggable: false
      height: 48
      id: 1761044157730start
      parentId: '1761044157730'
      position:
        x: 60
        y: 83.5
      positionAbsolute:
        x: 2451
        y: 992.5
      selectable: false
      sourcePosition: right
      targetPosition: left
      type: custom-iteration-start
      width: 44
      zIndex: 1002
    - data:
        isInIteration: true
        isInLoop: false
        is_team_authorization: true
        iteration_id: '1761044157730'
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: 要合成的文本内容
            ja_JP: 要合成的文本内容
            pt_BR: 要合成的文本内容
            zh_Hans: 要合成的文本内容
          label:
            en_US: text
            ja_JP: text
            pt_BR: text
            zh_Hans: text
          llm_description: 要合成的文本内容
          max: null
          min: null
          name: text
          options: []
          placeholder:
            en_US: 要合成的文本内容
            ja_JP: 要合成的文本内容
            pt_BR: 要合成的文本内容
            zh_Hans: 要合成的文本内容
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: 音色类型
            ja_JP: 音色类型
            pt_BR: 音色类型
            zh_Hans: 音色类型
          label:
            en_US: voice_type
            ja_JP: voice_type
            pt_BR: voice_type
            zh_Hans: voice_type
          llm_description: 音色类型
          max: null
          min: null
          name: voice_type
          options: []
          placeholder:
            en_US: 音色类型
            ja_JP: 音色类型
            pt_BR: 音色类型
            zh_Hans: 音色类型
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: '1.0'
          form: llm
          human_description:
            en_US: 语速比例（字符串格式，支持Dify变量表达式）
            ja_JP: 语速比例（字符串格式，支持Dify变量表达式）
            pt_BR: 语速比例（字符串格式，支持Dify变量表达式）
            zh_Hans: 语速比例（字符串格式，支持Dify变量表达式）
          label:
            en_US: speed_ratio
            ja_JP: speed_ratio
            pt_BR: speed_ratio
            zh_Hans: speed_ratio
          llm_description: 语速比例（字符串格式，支持Dify变量表达式）
          max: null
          min: null
          name: speed_ratio
          options: []
          placeholder:
            en_US: 语速比例（字符串格式，支持Dify变量表达式）
            ja_JP: 语速比例（字符串格式，支持Dify变量表达式）
            pt_BR: 语速比例（字符串格式，支持Dify变量表达式）
            zh_Hans: 语速比例（字符串格式，支持Dify变量表达式）
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: mp3
          form: llm
          human_description:
            en_US: 音频格式
            ja_JP: 音频格式
            pt_BR: 音频格式
            zh_Hans: 音频格式
          label:
            en_US: audio_format
            ja_JP: audio_format
            pt_BR: audio_format
            zh_Hans: audio_format
          llm_description: 音频格式
          max: null
          min: null
          name: audio_format
          options: []
          placeholder:
            en_US: 音频格式
            ja_JP: 音频格式
            pt_BR: 音频格式
            zh_Hans: 音频格式
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: 24000
          form: llm
          human_description:
            en_US: 采样率
            ja_JP: 采样率
            pt_BR: 采样率
            zh_Hans: 采样率
          label:
            en_US: sample_rate
            ja_JP: sample_rate
            pt_BR: sample_rate
            zh_Hans: sample_rate
          llm_description: 采样率
          max: null
          min: null
          name: sample_rate
          options: []
          placeholder:
            en_US: 采样率
            ja_JP: 采样率
            pt_BR: 采样率
            zh_Hans: 采样率
          precision: null
          required: false
          scope: null
          template: null
          type: number
        params:
          audio_format: ''
          sample_rate: ''
          speed_ratio: ''
          text: ''
          voice_type: ''
        provider_id: e16b4054-17e0-4eeb-87e4-4fd994a92b6a
        provider_name: tts_gateway3006
        provider_type: api
        selected: false
        title: tts_synthesize
        tool_configurations: {}
        tool_description: 输入文本和音色参数，返回合成的音频URL
        tool_label: tts_synthesize
        tool_name: tts_synthesize
        tool_node_version: '2'
        tool_parameters:
          audio_format:
            type: mixed
            value: mp3
          sample_rate:
            type: constant
            value: 24000
          speed_ratio:
            type: mixed
            value: '1.0'
          text:
            type: mixed
            value: '{{#1761044157730.item.text#}}'
          voice_type:
            type: mixed
            value: '{{#start_1.tts_voice#}}'
        type: tool
      height: 51
      id: '1761044198738'
      parentId: '1761044157730'
      position:
        x: 204
        y: 82
      positionAbsolute:
        x: 2595
        y: 991
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
      zIndex: 1002
    - data:
        code: "from typing import Any, Dict, Tuple\nimport ssl, urllib.request, urllib.error,\
          \ json, uuid, mimetypes\nimport logging\n\nDEF_PREFIX = 'capcut/audio'\n\
          DEFAULT_REFERER = 'http://8.148.70.18:8080'\nDEFAULT_UA = 'Mozilla/5.0 (Windows\
          \ NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0\
          \ Safari/537.36'\n\ndef _pick_file(files: Any) -> Tuple[str, str, str]:\n\
          \    \"\"\"Return (url, filename, content_type) if possible.\"\"\"\n   \
          \ url = ''\n    filename = 'upload.bin'\n    content_type = ''\n    if isinstance(files,\
          \ dict) and isinstance(files.get('files'), list):\n        files = files['files']\n\
          \    if isinstance(files, list) and files:\n        f = files[0] if isinstance(files[0],\
          \ dict) else None\n        if isinstance(f, dict):\n            url = (f.get('url')\
          \ or f.get('remote_url') or f.get('signed_url') or f.get('file_url') or\
          \ f.get('audio_url') or '').strip()\n            name = f.get('filename')\
          \ or f.get('name') or ''\n            ext = f.get('extension') or ''\n \
          \           mt = f.get('mime_type') or ''\n            if name:\n      \
          \          filename = name\n            elif ext:\n                filename\
          \ = 'upload' + (ext if ext.startswith('.') else ('.' + ext))\n         \
          \   if isinstance(mt, str) and mt.strip():\n                content_type\
          \ = mt.strip()\n            elif isinstance(filename, str):\n          \
          \      guessed = mimetypes.guess_type(filename)[0]\n                if guessed:\n\
          \                    content_type = guessed\n    return url, filename, content_type\n\
          \ndef _http_json(api_base_url: str, path: str, payload: Dict[str, Any])\
          \ -> Dict[str, Any]:\n    req = urllib.request.Request(\n        url=f\"\
          {api_base_url.rstrip('/')}/{path.lstrip('/')}\",\n        data=json.dumps(payload).encode('utf-8'),\n\
          \        headers={'Content-Type': 'application/json'},\n        method='POST',\n\
          \    )\n    ctx = ssl.create_default_context()\n    with urllib.request.urlopen(req,\
          \ timeout=30, context=ctx) as resp:\n        return json.loads(resp.read().decode('utf-8'))\n\
          \ndef _http_multipart(api_base_url: str, filename: str, content: bytes,\
          \ content_type: str) -> Dict[str, Any]:\n    boundary = '----DifyBoundary'\
          \ + uuid.uuid4().hex\n    ct = content_type or 'application/octet-stream'\n\
          \    parts = []\n    parts.append(f\"--{boundary}\\r\\nContent-Disposition:\
          \ form-data; name=\\\"prefix\\\"\\r\\n\\r\\n{DEF_PREFIX}\\r\\n\")\n    header\
          \ = (\n        f\"--{boundary}\\r\\n\"\n        f\"Content-Disposition:\
          \ form-data; name=\\\"file\\\"; filename=\\\"{filename}\\\"\\r\\n\"\n  \
          \      f\"Content-Type: {ct}\\r\\n\\r\\n\"\n    ).encode('utf-8')\n    tail\
          \ = f\"\\r\\n--{boundary}--\\r\\n\".encode('utf-8')\n    body = b''.join([p.encode('utf-8')\
          \ for p in parts]) + header + content + tail\n    req = urllib.request.Request(\n\
          \        url=f\"{api_base_url.rstrip('/')}/upload_to_oss\",\n        data=body,\n\
          \        headers={'Content-Type': f'multipart/form-data; boundary={boundary}'},\n\
          \        method='POST',\n    )\n    ctx = ssl.create_default_context()\n\
          \    with urllib.request.urlopen(req, timeout=60, context=ctx) as resp:\n\
          \        return json.loads(resp.read().decode('utf-8'))\n\ndef _try_upload(api_base_url:\
          \ str, file_url: str, filename: str, content_type: str) -> str:\n    ctx\
          \ = ssl.create_default_context()\n    req = urllib.request.Request(file_url,\
          \ method='GET', headers={'Referer': DEFAULT_REFERER, 'User-Agent': DEFAULT_UA})\n\
          \    try:\n        with urllib.request.urlopen(req, timeout=60, context=ctx)\
          \ as r:\n            data = r.read()\n            ct = content_type or r.headers.get('Content-Type',\
          \ '')\n        out = _http_multipart(api_base_url, filename, data, ct or\
          \ content_type)\n        return (out.get('oss_url') or '').strip()\n   \
          \ except Exception as e:\n        logging.warning(f\"Multipart upload failed:\
          \ {str(e)}\")\n        return ''\n\ndef _try_mirror(api_base_url: str, file_url:\
          \ str) -> str:\n    try:\n        out = _http_json(api_base_url, 'mirror_to_oss',\
          \ {'url': file_url, 'prefix': DEF_PREFIX})\n        return (out.get('oss_url')\
          \ or '').strip()\n    except Exception as e:\n        logging.warning(f\"\
          Mirror upload failed: {str(e)}\")\n        return ''\n\ndef main(files:\
          \ Any, api_base_url: str) -> Dict[str, Any]:\n    \"\"\"将豆包生成的音频上传到OSS，获取持久化的公网访问URL\"\
          \"\"\n    try:\n        url, filename, content_type = _pick_file(files)\n\
          \        \n        if not isinstance(api_base_url, str) or not api_base_url.strip():\n\
          \            logging.warning(\"API base URL未配置，返回原始URL\")\n            return\
          \ {\n                'oss_url': url or '',\n                'upload_success':\
          \ bool(url),\n                'error': 'API base URL未配置' if not url else\
          \ ''\n            }\n        \n        if not url:\n            logging.error(\"\
          未找到有效的音频URL\")\n            return {\n                'oss_url': '',\n \
          \               'upload_success': False,\n                'error': '未找到有效的音频URL'\n\
          \            }\n        \n        logging.info(f\"开始上传音频到OSS: {filename},\
          \ 原始URL: {url[:100]}...\")\n        logging.info(f\"使用OSS服务地址: {api_base_url}\"\
          )\n        \n        # 1) 优先使用直接上传 (multipart)\n        oss_url = _try_upload(api_base_url,\
          \ url, filename, content_type)\n        if oss_url:\n            logging.info(f\"\
          Multipart上传成功: {oss_url}\")\n            return {\n                'oss_url':\
          \ oss_url,\n                'upload_success': True,\n                'error':\
          \ ''\n            }\n        \n        # 2) 降级为URL镜像上传\n        logging.info(\"\
          Multipart上传失败，尝试URL镜像上传\")\n        oss_url = _try_mirror(api_base_url,\
          \ url)\n        if oss_url:\n            logging.info(f\"URL镜像上传成功: {oss_url}\"\
          )\n            return {\n                'oss_url': oss_url,\n         \
          \       'upload_success': True,\n                'error': ''\n         \
          \   }\n        \n        # 3) 检查原始URL是否可访问\n        logging.info(\"OSS上传失败，检查原始URL可访问性\"\
          )\n        try:\n            req = urllib.request.Request(url, method='HEAD')\n\
          \            with urllib.request.urlopen(req, timeout=10) as response:\n\
          \                if response.status == 200:\n                    logging.info(f\"\
          原始URL可访问，直接使用: {url}\")\n                    return {\n                \
          \        'oss_url': url,\n                        'upload_success': True,\n\
          \                        'error': 'OSS上传失败，但原始URL可用'\n                 \
          \   }\n        except Exception as e:\n            logging.warning(f\"原始URL检查失败:\
          \ {str(e)}\")\n        \n        # 4) 所有方式都失败，但仍返回原始URL作为降级\n        logging.warning(\"\
          所有上传方式都失败，返回原始URL作为降级方案\")\n        return {\n            'oss_url': url,\n\
          \            'upload_success': True,\n            'error': 'OSS上传失败，使用原始URL'\n\
          \        }\n        \n    except Exception as e:\n        error_msg = f\"\
          OSS上传过程中发生异常: {str(e)}\"\n        logging.error(error_msg)\n        try:\n\
          \            url, _, _ = _pick_file(files)\n            if url:\n      \
          \          return {\n                    'oss_url': url,\n             \
          \       'upload_success': True,\n                    'error': f'OSS上传异常，返回原始URL:\
          \ {str(e)}'\n                }\n        except:\n            pass\n    \
          \    return {\n            'oss_url': '',\n            'upload_success':\
          \ False,\n            'error': error_msg\n        }\n"
        code_language: python3
        isInIteration: true
        isInLoop: false
        iteration_id: '1761044157730'
        outputs:
          error:
            children: null
            type: string
          oss_url:
            children: null
            type: string
          upload_success:
            children: null
            type: boolean
        selected: false
        title: 上传语音到OSS
        type: code
        variables:
        - value_selector:
          - '1761044198738'
          - json
          value_type: array[object]
          variable: files
        - value_selector:
          - env
          - api_base_url
          value_type: string
          variable: api_base_url
      height: 51
      id: '1761044567218'
      parentId: '1761044157730'
      position:
        x: 506
        y: 82
      positionAbsolute:
        x: 2897
        y: 991
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
      zIndex: 1002
    - data:
        code: "import urllib.request\nimport ssl\nimport struct\nimport logging\n\
          from typing import Dict, Any\n\ndef main(audio_url: str, srt_item: dict)\
          \ -> Dict[str, Any]:\n    \"\"\"\n    获取音频文件的实际时长\n    \n    功能说明：\n   \
          \ 1. 下载音频文件的前几KB数据\n    2. 解析MP3文件头获取时长\n    3. 返回音频信息（URL、时长、SRT信息）\n \
          \   \n    Args:\n        audio_url: OSS音频URL\n        srt_item: 当前SRT项（包含index、timestamp、text）\n\
          \        \n    Returns:\n        包含音频URL、时长和SRT信息的字典\n    \"\"\"\n    \n\
          \    try:\n        if not audio_url or not isinstance(audio_url, str):\n\
          \            logging.warning(\"音频URL为空或格式无效\")\n            return {\n \
          \               \"audio_info\": {\n                    \"audio_url\": \"\
          \",\n                    \"duration\": 0.0,\n                    \"index\"\
          : srt_item.get(\"index\", 0),\n                    \"timestamp\": srt_item.get(\"\
          timestamp\", \"\"),\n                    \"srt_text\": srt_item.get(\"text\"\
          , \"\"),\n                    \"method\": \"error\",\n                 \
          \   \"error\": \"音频URL为空\",\n                    \"warning\": \"\",\n  \
          \                  \"file_size\": 0\n                }\n            }\n\
          \        \n        logging.info(f\"开始获取音频时长: {audio_url[:80]}...\")\n  \
          \      \n        # \U0001F3B5 方法1：尝试从HTTP头获取Content-Length估算时长\n       \
          \ try:\n            # 创建不验证SSL证书的context（适用于内网或自签名证书）\n            ctx =\
          \ ssl.create_default_context()\n            ctx.check_hostname = False\n\
          \            ctx.verify_mode = ssl.CERT_NONE\n            \n           \
          \ req = urllib.request.Request(audio_url, method='HEAD')\n            with\
          \ urllib.request.urlopen(req, timeout=5, context=ctx) as response:\n   \
          \             content_length = response.headers.get('Content-Length')\n\
          \                if content_length:\n                    # MP3比特率通常为128kbps\
          \ = 16KB/s\n                    # duration (秒) ≈ file_size (bytes) / (bitrate\
          \ / 8)\n                    file_size = int(content_length)\n          \
          \          estimated_duration = file_size / 16000  # 假设128kbps\n       \
          \             logging.info(f\"估算音频时长: {estimated_duration:.2f}秒 (文件大小: {file_size}\
          \ bytes)\")\n                    \n                    return {\n      \
          \                  \"audio_info\": {\n                            \"audio_url\"\
          : audio_url,\n                            \"duration\": round(estimated_duration,\
          \ 2),\n                            \"index\": srt_item.get(\"index\", 0),\n\
          \                            \"timestamp\": srt_item.get(\"timestamp\",\
          \ \"\"),\n                            \"srt_text\": srt_item.get(\"text\"\
          , \"\"),\n                            \"method\": \"estimated_from_size\"\
          ,\n                            \"file_size\": file_size,\n             \
          \               \"error\": \"\",\n                            \"warning\"\
          : \"\"\n                        }\n                    }\n        except\
          \ Exception as e:\n            logging.debug(f\"方法1失败（HTTP头）: {str(e)[:100]}\"\
          )\n        \n        # \U0001F3B5 方法2：从SRT时间戳计算时长（最可靠）\n        timestamp\
          \ = srt_item.get(\"timestamp\", \"\")\n        if \" --> \" in timestamp:\n\
          \            try:\n                start_str, end_str = timestamp.split(\"\
          \ --> \")\n                \n                def time_to_seconds(time_str:\
          \ str) -> float:\n                    \"\"\"转换 HH:MM:SS,mmm 格式为秒数\"\"\"\n\
          \                    parts = time_str.strip().split(',')\n             \
          \       if len(parts) != 2:\n                        return 0\n        \
          \            main_part = parts[0]  # HH:MM:SS\n                    ms =\
          \ parts[1]  # mmm\n                    time_parts = main_part.split(':')\n\
          \                    if len(time_parts) != 3:\n                        return\
          \ 0\n                    h = int(time_parts[0])\n                    m =\
          \ int(time_parts[1])\n                    s = int(time_parts[2])\n     \
          \               ms_val = int(ms) if ms.isdigit() else 0\n              \
          \      return h * 3600 + m * 60 + s + ms_val / 1000\n                \n\
          \                start = time_to_seconds(start_str)\n                end\
          \ = time_to_seconds(end_str)\n                srt_duration = end - start\n\
          \                \n                if srt_duration > 0:\n              \
          \      logging.info(f\"从SRT获取音频时长: {srt_duration:.2f}秒\")\n            \
          \        return {\n                        \"audio_info\": {\n         \
          \                   \"audio_url\": audio_url,\n                        \
          \    \"duration\": round(srt_duration, 2),\n                           \
          \ \"index\": srt_item.get(\"index\", 0),\n                            \"\
          timestamp\": timestamp,\n                            \"srt_text\": srt_item.get(\"\
          text\", \"\"),\n                            \"method\": \"from_srt_timestamp\"\
          ,\n                            \"error\": \"\",\n                      \
          \      \"warning\": \"\",\n                            \"file_size\": 0\n\
          \                        }\n                    }\n            except Exception\
          \ as e:\n                logging.debug(f\"方法2失败（SRT解析）: {str(e)[:100]}\"\
          )\n        \n        # \U0001F3B5 方法3：使用默认时长（兜底）\n        logging.info(\"\
          使用默认时长1.0秒\")\n        return {\n            \"audio_info\": {\n       \
          \         \"audio_url\": audio_url,\n                \"duration\": 1.0,\n\
          \                \"index\": srt_item.get(\"index\", 0),\n              \
          \  \"timestamp\": srt_item.get(\"timestamp\", \"\"),\n                \"\
          srt_text\": srt_item.get(\"text\", \"\"),\n                \"method\": \"\
          default\",\n                \"error\": \"\",\n                \"warning\"\
          : \"无法获取实际时长，使用默认值\",\n                \"file_size\": 0\n            }\n\
          \        }\n        \n    except Exception as e:\n        error_msg = f\"\
          获取音频时长异常: {str(e)}\"\n        logging.error(error_msg)\n        return {\n\
          \            \"audio_info\": {\n                \"audio_url\": audio_url\
          \ or \"\",\n                \"duration\": 1.0,\n                \"index\"\
          : srt_item.get(\"index\", 0),\n                \"timestamp\": srt_item.get(\"\
          timestamp\", \"\"),\n                \"srt_text\": srt_item.get(\"text\"\
          , \"\"),\n                \"method\": \"error\",\n                \"error\"\
          : error_msg,\n                \"warning\": \"\",\n                \"file_size\"\
          : 0\n            }\n        }\n"
        code_language: python3
        desc: 获取音频文件的实际时长，优先从SRT时间戳计算
        isInIteration: true
        isInLoop: false
        iteration_id: '1761044157730'
        outputs:
          audio_info:
            children:
              audio_url:
                type: string
              duration:
                type: number
              error:
                type: string
              file_size:
                type: number
              index:
                type: number
              method:
                type: string
              srt_text:
                type: string
              timestamp:
                type: string
              warning:
                type: string
            type: object
        selected: false
        title: 获取音频时长
        type: code
        variables:
        - value_selector:
          - '1761044567218'
          - oss_url
          value_type: string
          variable: audio_url
        - value_selector:
          - '1761044157730'
          - item
          value_type: object
          variable: srt_item
      height: 95
      id: '1761044999999'
      parentId: '1761044157730'
      position:
        x: 808
        y: 60
      positionAbsolute:
        x: 3199
        y: 969
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
      zIndex: 1002
    - data:
        code: "import requests\nimport json\nimport logging\n\ndef main(audios: list,\
          \ draft_id: str, api_base_url: str) -> dict:\n    \"\"\"\n    批量添加语音到草稿，使用格式化的音频数组（修复版本）\n\
          \    \n    修复内容：\n    1. 修正字段名映射：使用 start_time 而不是 start\n    2. 修正时间单位：直接使用秒级时间戳，不进行微秒转换\n\
          \    3. 添加参数验证\n    \n    Args:\n        audios: 格式化的音频对象数组 [{material_url,\
          \ start_time, duration, ...}]\n               start_time/duration都是秒单位\n\
          \        draft_id: 草稿ID\n        api_base_url: API基础URL\n        \n    Returns:\n\
          \        批量处理结果\n    \"\"\"\n    results = []\n    success_count = 0\n \
          \   failed_count = 0\n    \n    logging.info(f\"========== 开始批量添加语音 ==========\"\
          )\n    logging.info(f\"总计: {len(audios)} 段语音\")\n    logging.info(f\"草稿ID:\
          \ {draft_id}\")\n    logging.info(f\"API地址: {api_base_url}\")\n    \n  \
          \  for idx, audio in enumerate(audios, 1):\n        try:\n            #\
          \ \U0001F3B5 修复：正确获取字段名\n            # 支持从 audio_url 或 material_url 字段获取音频URL\n\
          \            audio_url = audio.get('audio_url', '') or audio.get('material_url',\
          \ '')\n            \n            # 修复：使用正确的字段名 start_time 和 duration（秒级）\n\
          \            start = audio.get('start_time', 0)  # 秒级时间戳\n            duration\
          \ = audio.get('duration', 0)  # 秒级时长\n            volume = audio.get('volume',\
          \ 10)  # 音量（默认10）\n            \n            if not audio_url:\n       \
          \         logging.warning(f\"语音 {idx}: 音频URL为空 - audio_url: {audio.get('audio_url',\
          \ 'None')}, material_url: {audio.get('material_url', 'None')}\")\n     \
          \           failed_count += 1\n                results.append({\n      \
          \              \"index\": idx,\n                    \"status\": \"error\"\
          ,\n                    \"error\": \"音频URL为空\",\n                    \"audio_url\"\
          : audio_url\n                })\n                continue\n            \n\
          \            # 验证时间参数的有效性\n            if start < 0 or duration <= 0:\n\
          \                logging.warning(f\"语音 {idx}: 时间参数无效 - start: {start}, duration:\
          \ {duration}\")\n                failed_count += 1\n                results.append({\n\
          \                    \"index\": idx,\n                    \"status\": \"\
          error\",\n                    \"error\": f\"时间参数无效: start={start}, duration={duration}\"\
          ,\n                    \"audio_url\": audio_url\n                })\n  \
          \              continue\n            \n            # 修复：直接使用秒级时间戳，无需转换\n\
          \            # start 和 duration 已经是秒级，直接使用\n            \n            #\
          \ 准备API请求数据\n            payload = {\n                \"draft_id\": draft_id,\n\
          \                \"audio_url\": audio_url,\n                \"start\": start,\n\
          \                \"duration\": duration,\n                \"volume\": 1.0,\n\
          \                \"track_name\": \"audio_voice\",\n                \"material_type\"\
          : \"audio\",\n                \"type\": \"audio\"\n            }\n     \
          \       \n            logging.info(f\"语音 {idx}/{len(audios)}\")\n      \
          \      logging.info(f\"  start={start:.3f}秒, duration={duration:.3f}秒, end={(start+duration):.3f}秒\"\
          )\n            logging.info(f\"  URL: {audio_url[:80]}...\")\n         \
          \   \n            # 调用API\n            response = requests.post(\n     \
          \           f\"{api_base_url}/add_audio\",\n                json=payload,\n\
          \                headers={'Content-Type': 'application/json'},\n       \
          \         timeout=30\n            )\n            \n            if response.status_code\
          \ == 200:\n                success_count += 1\n                logging.info(f\"\
          \  ✅ 成功\")\n                results.append({\n                    \"index\"\
          : audio.get('index', idx),\n                    \"status\": \"success\"\
          ,\n                    \"audio_url\": audio_url,  # 使用已经获取的audio_url变量（包含material_url的值）\n\
          \                    \"start\": start,\n                    \"duration\"\
          : duration,\n                    \"response\": response.text[:100]\n   \
          \             })\n            else:\n                failed_count += 1\n\
          \                logging.error(f\"  ❌ HTTP {response.status_code}: {response.text[:100]}\"\
          )\n                results.append({\n                    \"index\": audio.get('index',\
          \ idx),\n                    \"status\": \"error\",\n                  \
          \  \"error\": f\"HTTP {response.status_code}\",\n                    \"\
          audio_url\": audio_url,\n                    \"response\": response.text[:200]\n\
          \                })\n        except requests.Timeout:\n            failed_count\
          \ += 1\n            logging.error(f\"语音 {idx}: 请求超时\")\n            results.append({\n\
          \                \"index\": audio.get('index', idx),\n                \"\
          status\": \"error\",\n                \"error\": \"请求超时\",\n           \
          \     \"audio_url\": audio_url\n            })\n        except Exception\
          \ as e:\n            failed_count += 1\n            logging.error(f\"语音\
          \ {idx}: 异常 - {str(e)}\")\n            results.append({\n              \
          \  \"index\": audio.get('index', idx),\n                \"status\": \"error\"\
          ,\n                \"error\": str(e)[:200],\n                \"audio_url\"\
          : audio_url if 'audio_url' in locals() else audio.get('material_url', '')\n\
          \            })\n    \n    # 生成摘要\n    summary = f\"✅ 成功: {success_count},\
          \ ❌ 失败: {failed_count}, \U0001F4CA 总计: {len(audios)}\"\n    logging.info(f\"\
          ========== 批量添加完成 ==========\")\n    logging.info(summary)\n    \n    return\
          \ {\n        \"success\": success_count > 0,\n        \"success_count\"\
          : success_count,\n        \"failed_count\": failed_count,\n        \"total_count\"\
          : len(audios),\n        \"summary\": summary,\n        \"results\": results\n\
          \    }"
        code_language: python3
        desc: 批量添加语音到草稿，每个语音使用SRT时间戳与图片对齐
        outputs:
          failed_count:
            children: null
            type: number
          results:
            children: null
            type: array[object]
          success:
            children: null
            type: boolean
          success_count:
            children: null
            type: number
          summary:
            children: null
            type: string
          total_count:
            children: null
            type: number
        selected: false
        title: 批量添加语音
        type: code
        variables:
        - value_selector:
          - code_aggregate_results
          - formatted_audios
          value_type: array[object]
          variable: audios
        - value_selector:
          - '1761042052305'
          - draft_id
          value_type: string
          variable: draft_id
        - value_selector:
          - env
          - api_base_url
          value_type: string
          variable: api_base_url
      height: 95
      id: '17610450813550'
      position:
        x: 5428
        y: 423
      positionAbsolute:
        x: 5428
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        authorization:
          config: null
          type: no-auth
        body:
          data:
          - id: key-value-212
            key: ''
            type: text
            value: "{\n  \"draft_id\": \"{{#1761042052305.draft_id#}}\"\n}"
          type: raw-text
        headers: Content-Type:application/json
        method: post
        params: ''
        retry_config:
          max_retries: 3
          retry_enabled: true
          retry_interval: 100
        selected: false
        ssl_verify: true
        timeout:
          max_connect_timeout: 0
          max_read_timeout: 0
          max_write_timeout: 0
        title: 生成草稿下载链接
        type: http-request
        url: '{{#env.api_base_url#}}/generate_draft_url'
        variables: []
      height: 141
      id: '17610453130500'
      position:
        x: 6938
        y: 423
      positionAbsolute:
        x: 6938
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        code: "import json\nimport requests\nimport time\n\ndef main(draft_id: str)\
          \ -> dict:\n    \"\"\"\n    生成草稿下载链接的优化版本\n    \n    策略：\n    1. 直接调用 /generate_draft_url\
          \ API 获取下载链接（推荐方案）\n    2. 如果失败，使用预览链接作为备选方案\n    3. 生成预览链接用于在线预览\n    \n\
          \    Args:\n        draft_id: 草稿ID\n        \n    Returns:\n        包含下载链接和预览链接的字典\n\
          \    \"\"\"\n    \n    result = {\n        \"real_download_url\": \"\",\n\
          \        \"preview_url\": \"\",\n        \"draft_id\": \"\",\n        \"\
          status\": \"success\",\n        \"debug_log\": [],\n        \"error_reason\"\
          : \"\"\n    }\n    \n    debug_log = result[\"debug_log\"]\n    \n    try:\n\
          \        if not draft_id:\n            result[\"status\"] = \"error: draft_id为空\"\
          \n            result[\"error_reason\"] = \"输入draft_id为空\"\n            return\
          \ result\n        \n        # 清理 draft_id\n        draft_id = str(draft_id).strip().strip('\"\
          ').strip(\"'\")\n        result[\"draft_id\"] = draft_id\n        debug_log.append(f\"\
          ✅ 开始处理 - draft_id: {draft_id}\")\n        \n        # 策略1：调用 /generate_draft_url\
          \ API 获取最可靠的下载链接\n        api_base = \"http://8.148.70.18:9000\"\n     \
          \   generate_url_api = f\"{api_base}/generate_draft_url\"\n        \n  \
          \      max_retries = 5\n        retry_delays = [2, 3, 4, 5, 6]\n       \
          \ last_error = \"\"\n        \n        for attempt in range(max_retries):\n\
          \            try:\n                # 调用 /generate_draft_url API\n      \
          \          payload = {\n                    \"draft_id\": draft_id,\n  \
          \                  \"client_os\": \"windows\",\n                    \"force_save\"\
          : True\n                }\n                \n                response =\
          \ requests.post(generate_url_api, json=payload, timeout=30)\n          \
          \      \n                if response.status_code == 200:\n             \
          \       try:\n                        result_data = response.json()\n  \
          \                      \n                        # 检查API是否成功\n         \
          \               if result_data.get('success'):\n                       \
          \     output = result_data.get('output', {})\n                         \
          \   download_url = output.get('draft_url')\n                           \
          \ \n                            if download_url and isinstance(download_url,\
          \ str) and download_url.strip():\n                                result[\"\
          real_download_url\"] = download_url.strip()\n                          \
          \      debug_log.append(f\"✅ 成功获取下载链接 (尝试{attempt + 1})\")\n           \
          \                     break\n                            else:\n       \
          \                         last_error = f\"draft_url为空 (来源: {output.get('source',\
          \ 'unknown')})\"\n                                if attempt < max_retries\
          \ - 1:\n                                    time.sleep(retry_delays[attempt])\n\
          \                        else:\n                            # API返回失败\n\
          \                            last_error = result_data.get('error', 'API返回success=false')\n\
          \                            if attempt < max_retries - 1:\n           \
          \                     time.sleep(retry_delays[attempt])\n              \
          \      except json.JSONDecodeError:\n                        last_error\
          \ = \"JSON解析失败\"\n                        if attempt < max_retries - 1:\n\
          \                            time.sleep(retry_delays[attempt])\n       \
          \         else:\n                    last_error = f\"HTTP状态码 {response.status_code}\"\
          \n                    if attempt < max_retries - 1:\n                  \
          \      time.sleep(retry_delays[attempt])\n                    \n       \
          \     except requests.Timeout:\n                last_error = \"请求超时\"\n\
          \                if attempt < max_retries - 1:\n                    time.sleep(retry_delays[attempt])\n\
          \            except Exception as e:\n                last_error = f\"异常:\
          \ {str(e)[:40]}\"\n                if attempt < max_retries - 1:\n     \
          \               time.sleep(retry_delays[attempt])\n        \n        # 如果没有获取到下载链接，使用预览链接作为备选（用户可在预览页面中下载）\n\
          \        if not result[\"real_download_url\"]:\n            debug_log.append(f\"\
          ⚠️ 无法获取直接下载链接\")\n            debug_log.append(f\"\U0001F4A1 原因: {last_error}\"\
          )\n            result[\"error_reason\"] = f\"无法生成直接下载链接: {last_error}. 请使用预览链接中的下载按钮\"\
          \n        \n        # 生成预览链接（总是生成，作为备选方案）\n        clean_draft_id = str(draft_id).strip().strip('\"\
          ').strip(\"'\")\n        if clean_draft_id:\n            result[\"preview_url\"\
          ] = f\"{api_base}/draft/preview/{clean_draft_id}\"\n            debug_log.append(f\"\
          ✅ 生成预览链接成功\")\n        \n    except Exception as e:\n        result[\"status\"\
          ] = f\"error: {str(e)[:50]}\"\n        result[\"error_reason\"] = str(e)[:100]\n\
          \        debug_log.append(f\"❌ 异常: {str(e)[:40]}\")\n    \n    # 最终状态\n\
          \    debug_log.append(f\"\U0001F4CA 状态: {result['status']}\")\n    \n  \
          \  return result\n"
        code_language: python3
        outputs:
          debug_log:
            children: null
            type: array[string]
          draft_id:
            children: null
            type: string
          error_reason:
            children: null
            type: string
          preview_url:
            children: null
            type: string
          real_download_url:
            children: null
            type: string
          status:
            children: null
            type: string
        selected: false
        title: 解析链接和生成预览
        type: code
        variables:
        - value_selector:
          - '1761042052305'
          - draft_id
          value_type: string
          variable: draft_id
      height: 51
      id: '1761045650096'
      position:
        x: 7240
        y: 423
      positionAbsolute:
        x: 7240
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    - data:
        code: "import requests\nimport json\nimport logging\nfrom typing import List,\
          \ Dict, Any\nimport time\n\ndef main(images: list, draft_id: str, api_base_url:\
          \ str) -> dict:\n    \"\"\"\n    批量添加图片到草稿，修复字段名不匹配问题\n    \n    Args:\n\
          \        images: 图片对象数组，支持多种时间字段格式\n        draft_id: 草稿ID\n        api_base_url:\
          \ API基础URL\n        \n    Returns:\n        批量处理结果\n    \"\"\"\n    results\
          \ = []\n    success_count = 0\n    failed_count = 0\n    \n    logging.info(f\"\
          ========== 开始批量添加图片 ==========\")\n    logging.info(f\"总计: {len(images)}\
          \ 张图片\")\n    logging.info(f\"草稿ID: {draft_id}\")\n    logging.info(f\"\
          API地址: {api_base_url}\")\n    \n    # \U0001F527 获取草稿当前时长，避免时间段重叠\n    draft_duration\
          \ = 0\n    try:\n        # 尝试获取草稿信息（如果API支持）\n        draft_info_response\
          \ = requests.get(f\"{api_base_url}/draft_info/{draft_id}\", timeout=10)\n\
          \        if draft_info_response.status_code == 200:\n            draft_data\
          \ = draft_info_response.json()\n            if draft_data.get('success')\
          \ and 'duration' in draft_data.get('output', {}):\n                draft_duration\
          \ = float(draft_data['output']['duration'])\n                logging.info(f\"\
          \U0001F4CF 检测到草稿当前时长: {draft_duration:.3f}秒\")\n        else:\n        \
          \    logging.info(\"\U0001F4CF 无法获取草稿时长信息，假设为空草稿\")\n    except Exception\
          \ as e:\n        logging.info(f\"\U0001F4CF 获取草稿时长失败: {str(e)[:50]}，假设为空草稿\"\
          )\n    \n    # 判断API使用的时间单位（基于错误信息分析，API使用微秒）\n    use_microseconds = True\n\
          \    logging.info(\"\U0001F550 检测到API使用微秒时间单位\")\n    \n    # 如果草稿已有内容，将所有图片时间偏移到草稿末尾\n\
          \    # 草稿时长如果是微秒，需要转换为秒进行计算\n    time_offset_seconds = draft_duration /\
          \ 1000000 if use_microseconds and draft_duration > 0 else draft_duration\n\
          \    \n    # 如果检测不到草稿时长但第一张图片从0开始失败，说明草稿有内容\n    # 根据错误信息 [start: 0, end:\
          \ 3000000] 推测草稿已有3秒内容\n    if time_offset_seconds == 0:\n        # 保守起见，从3.1秒开始添加图片\n\
          \        time_offset_seconds = 3.1\n        logging.info(f\"⚠️  检测到草稿可能已有内容，从\
          \ {time_offset_seconds:.1f}秒 开始添加图片\")\n    elif time_offset_seconds > 0:\n\
          \        logging.info(f\"⏰ 应用时间偏移: +{time_offset_seconds:.3f}秒（避免与现有内容重叠）\"\
          )\n    \n    for idx, img in enumerate(images, 1):\n        try:\n     \
          \       # \U0001F3A8 获取图片URL\n            image_url = img.get('image_url',\
          \ '') or img.get('material_url', '')\n            \n            # \U0001F550\
          \ 支持多种时间字段格式\n            start_time = img.get('start_time', img.get('start',\
          \ 0))  # 优先使用start_time\n            end_time = img.get('end_time', img.get('end',\
          \ 0))  # 优先使用end_time\n            duration_time = img.get('duration', 0)\
          \  # 持续时间\n            \n            # 确保使用正确的时间值（秒为单位）\n            start\
          \ = float(start_time)\n            duration = float(duration_time)\n   \
          \         \n            # 如果未提供持续时间但给了结束时间，则由 end - start 计算\n         \
          \   if duration <= 0 and end_time not in (None, \"\", 0):\n            \
          \    try:\n                    duration_candidate = float(end_time) - float(start_time)\n\
          \                    if duration_candidate > 0:\n                      \
          \  duration = duration_candidate\n                        logging.info(f\"\
          \  根据end_time推算duration: {duration:.3f}秒\")\n                except Exception:\n\
          \                    pass\n            \n            # 应用时间偏移，避免与现有内容重叠\n\
          \            start_with_offset = start + time_offset_seconds\n         \
          \   \n            if not image_url:\n                logging.warning(f\"\
          图片 {idx}: 图片URL为空 - image_url: '{img.get('image_url', '')}', material_url:\
          \ '{img.get('material_url', '')}'\")\n                failed_count += 1\n\
          \                results.append({\n                    \"index\": idx,\n\
          \                    \"status\": \"error\",\n                    \"error\"\
          : \"图片URL为空\"\n                })\n                continue\n          \
          \  \n            # 验证时间参数的有效性\n            if start < 0 or duration <= 0:\n\
          \                logging.warning(f\"图片 {idx}: 时间参数无效 - start: {start}, duration:\
          \ {duration}\")\n                failed_count += 1\n                results.append({\n\
          \                    \"index\": idx,\n                    \"status\": \"\
          error\",\n                    \"error\": f\"时间参数无效: start={start}, duration={duration}\"\
          \n                })\n                continue\n            \n         \
          \   # \U0001F504 构建API请求数据\n            request_data = {\n             \
          \   \"draft_id\": draft_id,\n                \"image_url\": image_url, \
          \ # API期望的参数名是 image_url\n                \"start\": int(start_with_offset\
          \ * 1000000),\n                \"duration\": int(duration * 1000000)\n \
          \           }\n            \n            logging.info(f\"图片 {idx}/{len(images)}\"\
          )\n            logging.info(f\"  原始时间: start={start:.3f}秒, duration={duration:.3f}秒\"\
          )\n            logging.info(f\"  偏移后: start={start_with_offset:.3f}秒, end={(start_with_offset+duration):.3f}秒\"\
          )\n            logging.info(f\"  URL: {image_url[:80]}...\")\n         \
          \   \n            # 调用API（添加前等待100ms确保API完全处理完上一张图片）\n            if idx\
          \ > 1:\n                time.sleep(0.1)  # 等待100毫秒\n            \n     \
          \       response = requests.post(\n                f\"{api_base_url}/add_image\"\
          ,\n                json=request_data,\n                headers={'Content-Type':\
          \ 'application/json'},\n                timeout=30\n            )\n    \
          \        \n            if response.status_code == 200:\n               \
          \ # 检查响应body中的error字段\n                try:\n                    response_data\
          \ = response.json()\n                    api_error = response_data.get('error',\
          \ '')\n                    \n                    if api_error and api_error.strip():\n\
          \                        # API返回了错误信息\n                        failed_count\
          \ += 1\n                        logging.error(f\"  ❌ API错误: {api_error[:100]}\"\
          )\n                        results.append({\n                          \
          \  \"index\": img.get('index', idx),\n                            \"status\"\
          : \"error\",\n                            \"error\": api_error[:200],\n\
          \                            \"image_url\": img.get('image_url'),\n    \
          \                        \"start\": start_with_offset,\n               \
          \             \"duration\": duration,\n                            \"response\"\
          : response.text[:100]\n                        })\n                    else:\n\
          \                        # 真正成功\n                        success_count +=\
          \ 1\n                        logging.info(f\"  ✅ 成功\")\n               \
          \         results.append({\n                            \"index\": img.get('index',\
          \ idx),\n                            \"status\": \"success\",\n        \
          \                    \"image_url\": img.get('image_url'),\n            \
          \                \"start\": start_with_offset,\n                       \
          \     \"duration\": duration,\n                            \"response\"\
          : response.text[:100]\n                        })\n                    \
          \    # 连续追加：更新偏移到当前片段结束，避免后续重叠\n                        time_offset_seconds\
          \ = start_with_offset + duration + 0.001  # 加1毫秒间隔\n                except\
          \ json.JSONDecodeError:\n                    # JSON解析失败，按成功处理\n        \
          \            success_count += 1\n                    logging.info(f\"  ✅\
          \ 成功 (无法解析响应JSON)\")\n                    results.append({\n           \
          \             \"index\": img.get('index', idx),\n                      \
          \  \"status\": \"success\",\n                        \"image_url\": img.get('image_url'),\n\
          \                        \"start\": start_with_offset,\n               \
          \         \"duration\": duration,\n                        \"response\"\
          : response.text[:100]\n                    })\n                    # 连续追加：更新偏移到当前片段结束，避免后续重叠\n\
          \                    time_offset_seconds = start_with_offset + duration\
          \ + 0.001  # 加1毫秒间隔\n            else:\n                failed_count +=\
          \ 1\n                logging.error(f\"  ❌ HTTP {response.status_code}: {response.text[:100]}\"\
          )\n                results.append({\n                    \"index\": img.get('index',\
          \ idx),\n                    \"status\": \"error\",\n                  \
          \  \"error\": f\"HTTP {response.status_code}\",\n                    \"\
          response\": response.text[:200]\n                })\n                \n\
          \        except requests.Timeout:\n            failed_count += 1\n     \
          \       logging.error(f\"图片 {idx}: 请求超时\")\n            results.append({\n\
          \                \"index\": img.get('index', idx),\n                \"status\"\
          : \"error\",\n                \"error\": \"请求超时\"\n            })\n    \
          \    except Exception as e:\n            failed_count += 1\n           \
          \ logging.error(f\"图片 {idx}: 异常 - {str(e)}\")\n            results.append({\n\
          \                \"index\": img.get('index', idx),\n                \"status\"\
          : \"error\",\n                \"error\": str(e)[:200]\n            })\n\
          \    \n    # 生成摘要\n    summary = f\"✅ 成功: {success_count}, ❌ 失败: {failed_count},\
          \ \U0001F4CA 总计: {len(images)}\"\n    logging.info(f\"========== 批量添加完成\
          \ ==========\")\n    logging.info(summary)\n    \n    return {\n       \
          \ \"success\": success_count > 0,\n        \"success_count\": success_count,\n\
          \        \"failed_count\": failed_count,\n        \"total_count\": len(images),\n\
          \        \"summary\": summary,\n        \"results\": results\n    }\n"
        code_language: python3
        desc: 批量添加图片到草稿，避免迭代兼容性问题
        outputs:
          failed_count:
            children: null
            type: number
          results:
            children: null
            type: array[object]
          success:
            children: null
            type: boolean
          success_count:
            children: null
            type: number
          summary:
            children: null
            type: string
          total_count:
            children: null
            type: number
        selected: false
        title: 批量添加图片(修复版)
        type: code
        variables:
        - value_selector:
          - code_aggregate_results
          - formatted_images
          value_type: array[object]
          variable: images
        - value_selector:
          - '1761042052305'
          - draft_id
          value_type: string
          variable: draft_id
        - value_selector:
          - env
          - api_base_url
          value_type: string
          variable: api_base_url
      height: 95
      id: code_batch_add_images
      position:
        x: 5730
        y: 423
      positionAbsolute:
        x: 5730
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
      zIndex: 1
    - data:
        code: "import requests\nimport json\nimport logging\nfrom typing import List,\
          \ Dict, Any\nimport time\nimport re\n\ndef parse_srt_timestamp(timestamp:\
          \ str) -> tuple:\n    \"\"\"\n    解析SRT时间戳格式 \"00:00:00,000 --> 00:00:01,250\"\
          \n    \n    Args:\n        timestamp: SRT格式的时间戳\n        \n    Returns:\n\
          \        (start_seconds, end_seconds, duration_seconds)\n    \"\"\"\n  \
          \  try:\n        # 分割开始和结束时间\n        start_str, end_str = timestamp.split('\
          \ --> ')\n        \n        def time_to_seconds(time_str):\n           \
          \ # 格式: \"00:00:00,000\"\n            time_part, ms_part = time_str.split(',')\n\
          \            h, m, s = map(int, time_part.split(':'))\n            ms =\
          \ int(ms_part)\n            return h * 3600 + m * 60 + s + ms / 1000.0\n\
          \        \n        start_seconds = time_to_seconds(start_str)\n        end_seconds\
          \ = time_to_seconds(end_str)\n        duration_seconds = end_seconds - start_seconds\n\
          \        \n        return start_seconds, end_seconds, duration_seconds\n\
          \        \n    except Exception as e:\n        logging.error(f\"解析时间戳失败:\
          \ {timestamp}, 错误: {e}\")\n        return 0, 0, 0\n\ndef main(srt_data:\
          \ list[dict], draft_id: str, api_base_url: str) -> dict:\n    \"\"\"\n \
          \   批量添加字幕到草稿\n    \n    Args:\n        srt_data: 字幕数据数组，每个元素包含 index, timestamp,\
          \ text\n        draft_id: 草稿ID\n        api_base_url: API基础URL\n       \
          \ \n    Returns:\n        批量处理结果\n    \"\"\"\n    results = []\n    success_count\
          \ = 0\n    failed_count = 0\n    \n    # 默认字幕样式参数\n    default_params =\
          \ {\n        \"font\": \"SourceHanSansCN_Regular\",\n        \"font_size\"\
          : 24.0,\n        \"font_color\": \"#FFFFFF\",\n        \"width\": 1080,\n\
          \        \"height\": 1920,\n        \"material_type\": \"subtitle\",\n \
          \       \"type\": \"subtitle\",\n        \"materialType\": \"subtitle\"\n\
          \    }\n    \n    # 合并用户提供的参数\n    subtitle_params = default_params\n  \
          \  \n    logging.info(f\"========== 开始批量添加字幕 ==========\")\n    logging.info(f\"\
          总计: {len(srt_data)} 条字幕\")\n    logging.info(f\"草稿ID: {draft_id}\")\n  \
          \  logging.info(f\"API地址: {api_base_url}\")\n    \n    # \U0001F527 获取草稿当前时长，避免时间段重叠\n\
          \    draft_duration = 0\n    try:\n        draft_info_response = requests.get(f\"\
          {api_base_url}/draft_info/{draft_id}\", timeout=10)\n        if draft_info_response.status_code\
          \ == 200:\n            draft_data = draft_info_response.json()\n       \
          \     if draft_data.get('success') and 'duration' in draft_data.get('output',\
          \ {}):\n                draft_duration = float(draft_data['output']['duration'])\n\
          \                logging.info(f\"\U0001F4CF 检测到草稿当前时长: {draft_duration:.3f}秒\"\
          )\n        else:\n            logging.info(\"\U0001F4CF 无法获取草稿时长信息，假设为空草稿\"\
          )\n    except Exception as e:\n        logging.info(f\"\U0001F4CF 获取草稿时长失败:\
          \ {str(e)[:50]}，假设为空草稿\")\n    \n    # 判断API使用的时间单位（基于之前的分析，API使用微秒）\n \
          \   use_microseconds = True\n    logging.info(\"\U0001F550 检测到API使用微秒时间单位\"\
          )\n    \n    # 计算时间偏移\n    time_offset_seconds = draft_duration / 1000000\
          \ if use_microseconds and draft_duration > 0 else draft_duration\n    \n\
          \    # 如果检测不到草稿时长，保守起见设置偏移\n    if time_offset_seconds == 0:\n        time_offset_seconds\
          \ = 0  # 字幕通常从0开始，不需要偏移\n        logging.info(\"\U0001F4DD 字幕从时间轴起始位置开始添加\"\
          )\n    else:\n        logging.info(f\"⏰ 应用时间偏移: +{time_offset_seconds:.3f}秒（避免与现有内容重叠）\"\
          )\n    \n    for idx, subtitle in enumerate(srt_data, 1):\n        try:\n\
          \            # \U0001F3AF 解析字幕数据\n            subtitle_index = subtitle.get('index',\
          \ idx)\n            timestamp = subtitle.get('timestamp', '')\n        \
          \    text = subtitle.get('text', '')\n            \n            if not text.strip():\n\
          \                logging.warning(f\"字幕 {idx}: 文本内容为空\")\n              \
          \  failed_count += 1\n                results.append({\n               \
          \     \"index\": subtitle_index,\n                    \"status\": \"error\"\
          ,\n                    \"error\": \"字幕文本为空\"\n                })\n     \
          \           continue\n            \n            if not timestamp:\n    \
          \            logging.warning(f\"字幕 {idx}: 时间戳为空\")\n                failed_count\
          \ += 1\n                results.append({\n                    \"index\"\
          : subtitle_index,\n                    \"status\": \"error\",\n        \
          \            \"error\": \"时间戳为空\"\n                })\n                continue\n\
          \            \n            # \U0001F550 解析时间戳\n            start_seconds,\
          \ end_seconds, duration_seconds = parse_srt_timestamp(timestamp)\n     \
          \       \n            if duration_seconds <= 0:\n                logging.warning(f\"\
          字幕 {idx}: 时间戳解析失败或持续时间无效: {timestamp}\")\n                failed_count +=\
          \ 1\n                results.append({\n                    \"index\": subtitle_index,\n\
          \                    \"status\": \"error\",\n                    \"error\"\
          : f\"时间戳无效: {timestamp}\"\n                })\n                continue\n\
          \            \n            # 应用时间偏移\n            start_with_offset = start_seconds\
          \ + time_offset_seconds\n            \n            # \U0001F504 构建API请求数据\
          \ - 使用完整的SRT格式\n            # 构建SRT格式的字幕条目\n            srt_entry = f\"\
          {subtitle_index}\\n{timestamp}\\n{text}\\n\"\n            \n           \
          \ request_data = {\n                \"draft_id\": draft_id,\n          \
          \      \"srt\": srt_entry,  # 完整的SRT格式数据\n                \"time_offset\"\
          : int(time_offset_seconds * 1000000),  # 只使用偏移量，不包含字幕本身的开始时间\n         \
          \       **subtitle_params  # 合并字幕样式参数\n            }\n            \n   \
          \         logging.info(f\"字幕 {idx}/{len(srt_data)}\")\n            logging.info(f\"\
          \  原始时间: {timestamp}\")\n            logging.info(f\"  解析时间: start={start_seconds:.3f}s,\
          \ end={end_seconds:.3f}s, duration={duration_seconds:.3f}s\")\n        \
          \    logging.info(f\"  偏移后: start={start_with_offset:.3f}s\")\n        \
          \    logging.info(f\"  文本: {text[:50]}{'...' if len(text) > 50 else ''}\"\
          )\n            \n            # 调用API（添加前等待100ms确保API完全处理完上一条字幕）\n      \
          \      if idx > 1:\n                time.sleep(0.1)\n            \n    \
          \        response = requests.post(\n                f\"{api_base_url}/add_subtitle\"\
          ,\n                json=request_data,\n                headers={'Content-Type':\
          \ 'application/json'},\n                timeout=30\n            )\n    \
          \        \n            if response.status_code == 200:\n               \
          \ try:\n                    response_data = response.json()\n          \
          \          api_error = response_data.get('error', '')\n                \
          \    \n                    if api_error and api_error.strip():\n       \
          \                 # API返回了错误信息\n                        failed_count +=\
          \ 1\n                        logging.error(f\"  ❌ API错误: {api_error[:100]}\"\
          )\n                        results.append({\n                          \
          \  \"index\": subtitle_index,\n                            \"status\": \"\
          error\",\n                            \"error\": api_error[:200],\n    \
          \                        \"text\": text,\n                            \"\
          timestamp\": timestamp,\n                            \"start\": start_with_offset,\n\
          \                            \"duration\": duration_seconds,\n         \
          \                   \"response\": response.text[:100]\n                \
          \        })\n                    else:\n                        # 成功\n \
          \                       success_count += 1\n                        logging.info(f\"\
          \  ✅ 成功添加\")\n                        results.append({\n               \
          \             \"index\": subtitle_index,\n                            \"\
          status\": \"success\",\n                            \"text\": text,\n  \
          \                          \"timestamp\": timestamp,\n                 \
          \           \"start\": start_with_offset,\n                            \"\
          duration\": duration_seconds,\n                            \"response\"\
          : response.text[:100]\n                        })\n                    \
          \    \n                except json.JSONDecodeError:\n                  \
          \  # JSON解析失败，按成功处理\n                    success_count += 1\n          \
          \          logging.info(f\"  ✅ 成功添加 (无法解析响应JSON)\")\n                  \
          \  results.append({\n                        \"index\": subtitle_index,\n\
          \                        \"status\": \"success\",\n                    \
          \    \"text\": text,\n                        \"timestamp\": timestamp,\n\
          \                        \"start\": start_with_offset,\n               \
          \         \"duration\": duration_seconds,\n                        \"response\"\
          : response.text[:100]\n                    })\n            else:\n     \
          \           failed_count += 1\n                logging.error(f\"  ❌ HTTP\
          \ {response.status_code}: {response.text[:100]}\")\n                results.append({\n\
          \                    \"index\": subtitle_index,\n                    \"\
          status\": \"error\",\n                    \"error\": f\"HTTP {response.status_code}\"\
          ,\n                    \"response\": response.text[:200]\n             \
          \   })\n                \n        except requests.Timeout:\n           \
          \ failed_count += 1\n            logging.error(f\"字幕 {idx}: 请求超时\")\n  \
          \          results.append({\n                \"index\": subtitle.get('index',\
          \ idx),\n                \"status\": \"error\",\n                \"error\"\
          : \"请求超时\"\n            })\n        except Exception as e:\n           \
          \ failed_count += 1\n            logging.error(f\"字幕 {idx}: 异常 - {str(e)}\"\
          )\n            results.append({\n                \"index\": subtitle.get('index',\
          \ idx),\n                \"status\": \"error\",\n                \"error\"\
          : str(e)[:200]\n            })\n    \n    # 生成摘要\n    summary = f\"✅ 成功:\
          \ {success_count}, ❌ 失败: {failed_count}, \U0001F4CA 总计: {len(srt_data)}\"\
          \n    logging.info(f\"========== 批量添加字幕完成 ==========\")\n    logging.info(summary)\n\
          \    \n    return {\n        \"summary\": summary\n    }"
        code_language: python3
        desc: 批量添加字幕
        outputs:
          summary:
            children: null
            type: string
        retry_config:
          max_retries: 3
          retry_enabled: false
          retry_interval: 1000
        selected: false
        title: 批量添加字幕
        type: code
        variables:
        - value_selector:
          - '1760622014513'
          - srt_array
          value_type: array[object]
          variable: srt_data
        - value_selector:
          - '1761042052305'
          - draft_id
          value_type: string
          variable: draft_id
        - value_selector:
          - env
          - api_base_url
          value_type: string
          variable: api_base_url
      height: 79
      id: '1761461437058'
      position:
        x: 6032
        y: 423
      positionAbsolute:
        x: 6032
        y: 423
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 242
    viewport:
      x: -1359.000000000001
      y: -239.0000000000001
      zoom: 0.7
  rag_pipeline_variables: []
